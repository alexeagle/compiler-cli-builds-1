/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
"use strict";
/**
 * Transform template html and css into executable code.
 * Intended to be used in a build step.
 */
const compiler = require('@angular/compiler');
const fs_1 = require('fs');
const compiler_host_1 = require('./compiler_host');
const path_mapped_compiler_host_1 = require('./path_mapped_compiler_host');
const GENERATED_META_FILES = /\.json$/;
const PREAMBLE = `/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

`;
class CodeGenerator {
    constructor(options, program, host, compiler, ngCompilerHost) {
        this.options = options;
        this.program = program;
        this.host = host;
        this.compiler = compiler;
        this.ngCompilerHost = ngCompilerHost;
    }
    codegen() {
        return this.compiler
            .compileAll(this.program.getSourceFiles().map(sf => this.ngCompilerHost.getCanonicalFileName(sf.fileName)))
            .then(generatedModules => {
            generatedModules.forEach(generatedModule => {
                const sourceFile = this.program.getSourceFile(generatedModule.srcFileUrl);
                const emitPath = this.ngCompilerHost.calculateEmitPath(generatedModule.genFileUrl);
                const source = GENERATED_META_FILES.test(emitPath) ? generatedModule.source :
                    PREAMBLE + generatedModule.source;
                this.host.writeFile(emitPath, source, false, () => { }, [sourceFile]);
            });
        });
    }
    static create(options, cliOptions, program, tsCompilerHost, compilerHostContext, ngCompilerHost) {
        if (!ngCompilerHost) {
            const usePathMapping = !!options.rootDirs && options.rootDirs.length > 0;
            const context = compilerHostContext || new compiler_host_1.ModuleResolutionHostAdapter(tsCompilerHost);
            ngCompilerHost = usePathMapping ? new path_mapped_compiler_host_1.PathMappedCompilerHost(program, options, context) :
                new compiler_host_1.CompilerHost(program, options, context);
        }
        const transFile = cliOptions.i18nFile;
        const locale = cliOptions.locale;
        let transContent = '';
        if (transFile) {
            if (!locale) {
                throw new Error(`The translation file (${transFile}) locale must be provided. Use the --locale option.`);
            }
            transContent = fs_1.readFileSync(transFile, 'utf8');
        }
        const { compiler: aotCompiler } = compiler.createAotCompiler(ngCompilerHost, {
            debug: options.debug === true,
            translations: transContent,
            i18nFormat: cliOptions.i18nFormat,
            locale: cliOptions.locale
        });
        return new CodeGenerator(options, program, tsCompilerHost, aotCompiler, ngCompilerHost);
    }
}
exports.CodeGenerator = CodeGenerator;
//# sourceMappingURL=codegen.js.map