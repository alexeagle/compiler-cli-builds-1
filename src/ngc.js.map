{"version":3,"file":"ngc.js","sourceRoot":"","sources":["../../../../packages/compiler-cli/src/ngc.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,oEAAoE;AACpE,4BAA0B;AAG1B,uBAAyB;AACzB,2BAA6B;AAE7B,qDAA4F;AAE5F,cACI,IAAc,EAAE,YAAiD,EACjE,SAAqE;IADrD,6BAAA,EAAA,eAAoC,OAAO,CAAC,KAAK;IACjE,0BAAA,EAAA,YAAmD,oCAAkB;IACvE,IAAI,CAAC;QACH,IAAM,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAM,OAAO,GAAG,UAAU,CAAC,CAAC,IAAI,UAAU,CAAC,OAAO,IAAI,GAAG,CAAC;QAE1D,IAAM,UAAU,GAAG,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;QAEpF,qEAAqE;QACrE,IAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,CAAC,CAAC;QACnD,IAAA,sEAAqE,EAApE,kBAAM,EAAE,wBAAS,CAAoD;QAC5E,MAAM,CAAC,oCAAkB,CACrB,QAAQ,EAAE,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC;IACtF,CAAC;IAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACtB,YAAY,CAAC,oBAAoB,CAAC,CAAC;QACnC,MAAM,CAAC,CAAC,CAAC;IACX,CAAC;AACH,CAAC;AAnBD,oBAmBC;AAED,kBAAkB;AAClB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;IAC5B,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAhB,CAAgB,CAAC,CAAC,CAAC;AACnE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Must be imported first, because Angular decorators throw on load.\nimport 'reflect-metadata';\n\nimport {isSyntaxError, syntaxError} from '@angular/compiler';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {performCompilation, readConfiguration, throwOnDiagnostics} from './perform-compile';\n\nexport function main(\n    args: string[], consoleError: (s: string) => void = console.error,\n    checkFunc: (cwd: string, ...args: any[]) => void = throwOnDiagnostics): number {\n  try {\n    const parsedArgs = require('minimist')(args);\n    const project = parsedArgs.p || parsedArgs.project || '.';\n\n    const projectDir = fs.lstatSync(project).isFile() ? path.dirname(project) : project;\n\n    // file names in tsconfig are resolved relative to this absolute path\n    const basePath = path.resolve(process.cwd(), projectDir);\n    const {parsed, ngOptions} = readConfiguration(project, basePath, checkFunc);\n    return performCompilation(\n        basePath, parsed.fileNames, parsed.options, ngOptions, consoleError, checkFunc);\n  } catch (e) {\n    consoleError(e.stack);\n    consoleError('Compilation failed');\n    return 2;\n  }\n}\n\n// CLI entry point\nif (require.main === module) {\n  process.exit(main(process.argv.slice(2), s => console.error(s)));\n}\n"]}