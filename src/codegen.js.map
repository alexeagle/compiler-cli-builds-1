{"version":3,"file":"codegen.js","sourceRoot":"","sources":["../../../../packages/compiler-cli/src/codegen.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Transform template html and css into executable code.\n * Intended to be used in a build step.\n */\nimport * as compiler from '@angular/compiler';\nimport {MissingTranslationStrategy} from '@angular/core';\nimport {AngularCompilerOptions, NgcCliOptions} from '@angular/tsc-wrapped';\nimport {readFileSync} from 'fs';\nimport * as ts from 'typescript';\n\nimport {CompilerHost, CompilerHostContext, ModuleResolutionHostAdapter} from './compiler_host';\nimport {PathMappedCompilerHost} from './path_mapped_compiler_host';\n\nconst GENERATED_META_FILES = /\\.json$/;\n\nconst PREAMBLE = `/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n /* tslint:disable */\n\n`;\n\nexport class CodeGenerator {\n  constructor(\n      private options: AngularCompilerOptions, private program: ts.Program,\n      public host: ts.CompilerHost, private compiler: compiler.AotCompiler,\n      private ngCompilerHost: CompilerHost) {}\n\n  codegen(): Promise<any> {\n    return this.compiler\n        .compileAll(this.program.getSourceFiles().map(\n            sf => this.ngCompilerHost.getCanonicalFileName(sf.fileName)))\n        .then(generatedModules => {\n          generatedModules.forEach(generatedModule => {\n            const sourceFile = this.program.getSourceFile(generatedModule.srcFileUrl);\n            const emitPath = this.ngCompilerHost.calculateEmitPath(generatedModule.genFileUrl);\n            const source = GENERATED_META_FILES.test(emitPath) ? generatedModule.source :\n                                                                 generatedModule.source;\n            this.host.writeFile(emitPath, source, false, () => {}, [sourceFile]);\n          });\n        });\n  }\n\n  static create(\n      options: AngularCompilerOptions, cliOptions: NgcCliOptions, program: ts.Program,\n      tsCompilerHost: ts.CompilerHost, compilerHostContext?: CompilerHostContext,\n      ngCompilerHost?: CompilerHost): CodeGenerator {\n    if (!ngCompilerHost) {\n      const usePathMapping = !!options.rootDirs && options.rootDirs.length > 0;\n      const context = compilerHostContext || new ModuleResolutionHostAdapter(tsCompilerHost);\n      ngCompilerHost = usePathMapping ? new PathMappedCompilerHost(program, options, context) :\n                                        new CompilerHost(program, options, context);\n    }\n    let transContent: string = '';\n    if (cliOptions.i18nFile) {\n      if (!cliOptions.locale) {\n        throw new Error(\n            `The translation file (${cliOptions.i18nFile}) locale must be provided. Use the --locale option.`);\n      }\n      transContent = readFileSync(cliOptions.i18nFile, 'utf8');\n    }\n    let missingTranslation = MissingTranslationStrategy.Warning;\n    if (cliOptions.missingTranslation) {\n      switch (cliOptions.missingTranslation) {\n        case 'error':\n          missingTranslation = MissingTranslationStrategy.Error;\n          break;\n        case 'warning':\n          missingTranslation = MissingTranslationStrategy.Warning;\n          break;\n        case 'ignore':\n          missingTranslation = MissingTranslationStrategy.Ignore;\n          break;\n        default:\n          throw new Error(\n              `Unknown option for missingTranslation (${cliOptions.missingTranslation}). Use either error, warning or ignore.`);\n      }\n    }\n    const {compiler: aotCompiler} = compiler.createAotCompiler(ngCompilerHost, {\n      translations: transContent,\n      i18nFormat: cliOptions.i18nFormat,\n      locale: cliOptions.locale, missingTranslation,\n      enableLegacyTemplate: options.enableLegacyTemplate !== false,\n      genFilePreamble: PREAMBLE,\n    });\n    return new CodeGenerator(options, program, tsCompilerHost, aotCompiler, ngCompilerHost);\n  }\n}\n"]}