{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/util.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,2BAA6B;AAC7B,+BAAiC;AAEjC,6BAA8E;AAEjE,QAAA,eAAe,GAAG,oEAAoE,CAAC;AACvF,QAAA,GAAG,GAAG,UAAU,CAAC;AAI9B,0FAA0F;AAC1F,6BAAoC,OAAmB;IACrD,MAAM,CAAE,OAAe,CAAC,iBAAiB,CAAC;AAC5C,CAAC;AAFD,kDAEC;AAED,iCAAwC,WAAmB;IACzD,MAAM,CAAC;QACL,IAAI,EAAE,SAAS;QACf,KAAK,EAAE,SAAS;QAChB,MAAM,EAAE,SAAS;QACjB,QAAQ,EAAE,EAAE,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,aAAA;QACpD,IAAI,EAAE,wBAAkB;QACxB,MAAM,EAAE,YAAM;KACf,CAAC;AACJ,CAAC;AATD,0DASC;AAED,qBAA4B,QAAgB,EAAE,OAAwB;IACpE,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,IAAI,oBAAoB,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAC7E,CAAC;AAFD,kCAEC;AAED,4BAAmC,QAAgB,EAAE,QAAkB;IACrE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;QAAC,MAAM,CAAC,QAAQ,CAAC;IAC/B,GAAG,CAAC,CAAc,UAAc,EAAd,KAAA,QAAQ,IAAI,EAAE,EAAd,cAAc,EAAd,IAAc;QAA3B,IAAM,GAAG,SAAA;QACZ,IAAM,GAAG,GAAG,oBAAoB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QAChD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,GAAG,CAAC;QACb,CAAC;KACF;IACD,MAAM,CAAC,QAAQ,CAAC;AAClB,CAAC;AATD,gDASC;AAED,8BAA8B,MAAc,EAAE,QAAgB;IAC5D,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC5C,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC;AAC3C,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {CompilerOptions, DEFAULT_ERROR_CODE, Diagnostic, SOURCE} from './api';\n\nexport const GENERATED_FILES = /(.*?)\\.(ngfactory|shim\\.ngstyle|ngstyle|ngsummary)\\.(js|d\\.ts|ts)$/;\nexport const DTS = /\\.d\\.ts$/;\n\nexport const enum StructureIsReused {Not = 0, SafeModules = 1, Completely = 2}\n\n// Note: This is an internal property in TypeScript. Use it only for assertions and tests.\nexport function tsStructureIsReused(program: ts.Program): StructureIsReused {\n  return (program as any).structureIsReused;\n}\n\nexport function createMessageDiagnostic(messageText: string): ts.Diagnostic&Diagnostic {\n  return {\n    file: undefined,\n    start: undefined,\n    length: undefined,\n    category: ts.DiagnosticCategory.Message, messageText,\n    code: DEFAULT_ERROR_CODE,\n    source: SOURCE,\n  };\n}\n\nexport function isInRootDir(fileName: string, options: CompilerOptions) {\n  return !options.rootDir || pathStartsWithPrefix(options.rootDir, fileName);\n}\n\nexport function relativeToRootDirs(filePath: string, rootDirs: string[]): string {\n  if (!filePath) return filePath;\n  for (const dir of rootDirs || []) {\n    const rel = pathStartsWithPrefix(dir, filePath);\n    if (rel) {\n      return rel;\n    }\n  }\n  return filePath;\n}\n\nfunction pathStartsWithPrefix(prefix: string, fullPath: string): string|null {\n  const rel = path.relative(prefix, fullPath);\n  return rel.startsWith('..') ? null : rel;\n}\n"]}