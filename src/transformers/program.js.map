{"version":3,"file":"program.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/program.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AotCompiler, AotCompilerHost, AotCompilerOptions, EmitterVisitorContext, GeneratedFile, MessageBundle, NgAnalyzedFile, NgAnalyzedModules, ParseSourceSpan, Serializer, TypeScriptEmitter, Xliff, Xliff2, Xmb, core, createAotCompiler, getParseErrors, isSyntaxError} from '@angular/compiler';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {TypeCheckHost, translateDiagnostics} from '../diagnostics/translate_diagnostics';\nimport {ModuleMetadata, createBundleIndexHost} from '../metadata/index';\n\nimport {CachedFiles, CompilerHost, CompilerOptions, CreateProgram, CustomTransformers, DEFAULT_ERROR_CODE, Diagnostic, EmitArguments, EmitCallback, EmitFlags, LibrarySummary, OldProgram, Program, SOURCE} from './api';\nimport {CodeGenerator, TsCompilerAotCompilerTypeCheckHostAdapter, getOriginalReferences} from './compiler_host';\nimport {LowerMetadataCache, getExpressionLoweringTransformFactory} from './lower_expressions';\nimport {getAngularEmitterTransformFactory} from './node_emitter_transform';\nimport {EXT, GENERATED_FILES, StructureIsReused, createMessageDiagnostic, tsStructureIsReused} from './util';\n\n\n/**\n * Maximum number of files that are emitable via calling ts.Program.emit\n * passing individual targetSourceFiles.\n */\nconst MAX_FILE_COUNT_FOR_SINGLE_FILE_EMIT = 20;\n\nconst emptyModules: NgAnalyzedModules = {\n  ngModules: [],\n  ngModuleByPipeOrDirective: new Map(),\n  files: []\n};\n\nconst defaultEmitCallback: EmitCallback =\n    ({program, targetSourceFiles, writeFile, cancellationToken, emitOnlyDtsFiles,\n      customTransformers}) => {\n      if (targetSourceFiles) {\n        const diagnostics: ts.Diagnostic[] = [];\n        let emitSkipped = false;\n        const emittedFiles: string[] = [];\n        for (const targetSourceFile of targetSourceFiles) {\n          const er = program.emit(\n              targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers);\n          diagnostics.push(...er.diagnostics);\n          emitSkipped = emitSkipped || er.emitSkipped;\n          emittedFiles.push(...er.emittedFiles);\n        }\n        return {diagnostics, emitSkipped, emittedFiles};\n      } else {\n        return program.emit(\n            /*targetSourceFile*/ undefined, writeFile, cancellationToken, emitOnlyDtsFiles,\n            customTransformers);\n      }\n    };\n\nclass AngularCompilerProgram implements Program {\n  private metadataCache: LowerMetadataCache;\n  private oldProgramLibrarySummaries: Map<string, LibrarySummary>|undefined;\n  private oldProgramEmittedGeneratedFiles: Map<string, GeneratedFile>|undefined;\n  private oldProgramEmittedSourceFiles: Map<string, ts.SourceFile>|undefined;\n  private oldProgramCachedFiles: CachedFiles|undefined;\n  // Note: This will be cleared out as soon as we create the _tsProgram\n  private oldTsProgram: ts.Program|undefined;\n  private emittedLibrarySummaries: LibrarySummary[]|undefined;\n  private emittedGeneratedFiles: GeneratedFile[]|undefined;\n  private emittedSourceFiles: ts.SourceFile[]|undefined;\n\n  // Lazily initialized fields\n  private _typeCheckHost: TypeCheckHost;\n  private _compiler: AotCompiler;\n  private _tsProgram: ts.Program;\n  private _analyzedModules: NgAnalyzedModules|undefined;\n  private _structuralDiagnostics: Diagnostic[]|undefined;\n  private _programWithStubs: ts.Program|undefined;\n  private _generatedFilesMap: Map<string, GeneratedFile>|undefined;\n  private _generatedFiles: GeneratedFile[]|undefined;\n  private _changedFileNames = new Map<string, boolean>();\n  private _optionsDiagnostics: Diagnostic[] = [];\n\n  constructor(\n      private rootNames: string[], private options: CompilerOptions, private host: CompilerHost,\n      oldProgram?: OldProgram) {\n    const [major, minor] = ts.version.split('.');\n    if (Number(major) < 2 || (Number(major) === 2 && Number(minor) < 4)) {\n      throw new Error('The Angular Compiler requires TypeScript >= 2.4.');\n    }\n    if (oldProgram) {\n      if ((oldProgram as Program).getTsProgram) {\n        const oldNgProgram = oldProgram as Program;\n        this.oldTsProgram = oldNgProgram.getTsProgram();\n        this.oldProgramLibrarySummaries = oldNgProgram.getLibrarySummaries();\n        this.oldProgramEmittedGeneratedFiles = oldNgProgram.getEmittedGeneratedFiles();\n        this.oldProgramEmittedSourceFiles = oldNgProgram.getEmittedSourceFiles();\n        this.oldProgramCachedFiles = {\n          getSourceFile: (fileName: string) => this.oldProgramEmittedSourceFiles !.get(fileName),\n          getGeneratedFile: (srcFileName: string, genFileName: string) =>\n                                this.oldProgramEmittedGeneratedFiles !.get(genFileName),\n        };\n      } else {\n        this.oldProgramCachedFiles = oldProgram as CachedFiles;\n      }\n    }\n\n    if (options.flatModuleOutFile) {\n      const {host: bundleHost, indexName, errors} = createBundleIndexHost(options, rootNames, host);\n      if (errors) {\n        // TODO(tbosch): once we move MetadataBundler from tsc_wrapped into compiler_cli,\n        // directly create ng.Diagnostic instead of using ts.Diagnostic here.\n        this._optionsDiagnostics.push(...errors.map(e => ({\n                                                      category: e.category,\n                                                      messageText: e.messageText as string,\n                                                      source: SOURCE,\n                                                      code: DEFAULT_ERROR_CODE\n                                                    })));\n      } else {\n        rootNames.push(indexName !);\n        this.host = bundleHost;\n      }\n    }\n    this.metadataCache = new LowerMetadataCache({quotedNames: true}, !!options.strictMetadataEmit);\n  }\n\n  getLibrarySummaries(): Map<string, LibrarySummary> {\n    const result = new Map<string, LibrarySummary>();\n    if (this.oldProgramLibrarySummaries) {\n      this.oldProgramLibrarySummaries.forEach((summary, fileName) => result.set(fileName, summary));\n    }\n    if (this.emittedLibrarySummaries) {\n      this.emittedLibrarySummaries.forEach(\n          (summary, fileName) => result.set(summary.fileName, summary));\n    }\n    return result;\n  }\n\n  getEmittedGeneratedFiles(): Map<string, GeneratedFile> {\n    const result = new Map<string, GeneratedFile>();\n    if (this.oldProgramEmittedGeneratedFiles) {\n      this.oldProgramEmittedGeneratedFiles.forEach(\n          (genFile, fileName) => result.set(fileName, genFile));\n    }\n    if (this.emittedGeneratedFiles) {\n      for (const genFile of this.emittedGeneratedFiles) {\n        result.set(genFile.genFileName, genFile);\n      }\n    }\n    return result;\n  }\n\n  getEmittedSourceFiles(): Map<string, ts.SourceFile> {\n    const result = new Map<string, ts.SourceFile>();\n    if (this.oldProgramEmittedSourceFiles) {\n      this.oldProgramEmittedSourceFiles.forEach((sf, fileName) => result.set(fileName, sf));\n    }\n    if (this.emittedSourceFiles) {\n      for (const sf of this.emittedSourceFiles) {\n        result.set(sf.fileName, sf);\n      }\n    }\n    return result;\n  }\n\n  getTsProgram(): ts.Program { return this.tsProgram; }\n\n  getTsOptionDiagnostics(cancellationToken?: ts.CancellationToken) {\n    return this.tsProgram.getOptionsDiagnostics(cancellationToken);\n  }\n\n  getNgOptionDiagnostics(cancellationToken?: ts.CancellationToken): Diagnostic[] {\n    return [...this._optionsDiagnostics, ...getNgOptionDiagnostics(this.options)];\n  }\n\n  getTsSyntacticDiagnostics(sourceFile?: ts.SourceFile, cancellationToken?: ts.CancellationToken):\n      ts.Diagnostic[] {\n    return this.tsProgram.getSyntacticDiagnostics(sourceFile, cancellationToken);\n  }\n\n  getNgStructuralDiagnostics(cancellationToken?: ts.CancellationToken): Diagnostic[] {\n    return this.structuralDiagnostics;\n  }\n\n  getTsSemanticDiagnostics(sourceFile?: ts.SourceFile, cancellationToken?: ts.CancellationToken):\n      ts.Diagnostic[] {\n    if (sourceFile) {\n      return this.tsProgram.getSemanticDiagnostics(sourceFile, cancellationToken);\n    }\n    let diags: ts.Diagnostic[] = [];\n    for (const sf of this.tsProgram.getSourceFiles()) {\n      if (!GENERATED_FILES.test(sf.fileName)) {\n        diags.push(...this.tsProgram.getSemanticDiagnostics(sf, cancellationToken));\n      }\n    }\n    return diags;\n  }\n\n  getNgSemanticDiagnostics(genFile?: GeneratedFile, cancellationToken?: ts.CancellationToken):\n      Diagnostic[] {\n    let diags: ts.Diagnostic[] = [];\n    if (genFile) {\n      diags.push(...this.tsProgram.getSemanticDiagnostics(\n          this.tsProgram.getSourceFile(genFile.genFileName), cancellationToken));\n    } else {\n      for (const sf of this.tsProgram.getSourceFiles()) {\n        if (GENERATED_FILES.test(sf.fileName) && !sf.isDeclarationFile) {\n          diags.push(...this.tsProgram.getSemanticDiagnostics(sf, cancellationToken));\n        }\n      }\n    }\n    const {ng} = translateDiagnostics(this.typeCheckHost, diags);\n    return ng;\n  }\n\n  loadNgStructureAsync(): Promise<void> {\n    if (this._analyzedModules) {\n      throw new Error('Angular structure already loaded');\n    }\n    const {tmpProgram, sourceFiles, hostAdapter, rootNames} = this._createProgramWithBasicStubs();\n    return this._compiler.loadFilesAsync(sourceFiles)\n        .catch(this.catchAnalysisError.bind(this))\n        .then(analyzedModules => {\n          if (this._analyzedModules) {\n            throw new Error('Angular structure loaded both synchronously and asynchronsly');\n          }\n          this._updateProgramWithTypeCheckStubs(\n              tmpProgram, analyzedModules, hostAdapter, rootNames);\n        });\n  }\n\n  getGeneratedFile(genFileName: string): GeneratedFile|undefined {\n    return this.generatedFilesMap.get(genFileName);\n  }\n\n  getGeneratedFiles(): GeneratedFile[] { return this.generatedFiles; }\n\n  hasChanged(fileName: string) {\n    if (!this.oldProgramCachedFiles) {\n      return true;\n    }\n    let changed = this._changedFileNames.get(fileName);\n    if (typeof changed === 'boolean') {\n      return changed;\n    }\n    const genFile = this.getGeneratedFile(fileName);\n    if (genFile) {\n      const oldGenFile = this.oldProgramCachedFiles !.getGeneratedFile(\n          genFile.srcFileName, genFile.genFileName) as GeneratedFile;\n      changed = !oldGenFile || !genFile.isEquivalent(oldGenFile);\n    } else {\n      const sf = this.tsProgram.getSourceFile(fileName);\n      const oldSf = this.oldProgramCachedFiles !.getSourceFile(fileName);\n      changed = !oldSf || sf !== oldSf;\n    }\n    this._changedFileNames.set(fileName, changed);\n    return changed;\n  }\n\n  emit(\n      {targetFileNames, emitFlags = EmitFlags.Default, cancellationToken, customTransformers,\n       emitCallback = defaultEmitCallback}: {\n        targetFileNames?: string[],\n        emitFlags?: EmitFlags,\n        cancellationToken?: ts.CancellationToken,\n        customTransformers?: CustomTransformers,\n        emitCallback?: EmitCallback\n      } = {}): ts.EmitResult {\n    const emitStart = Date.now();\n    if (emitFlags & EmitFlags.I18nBundle) {\n      const locale = this.options.i18nOutLocale || null;\n      const file = this.options.i18nOutFile || null;\n      const format = this.options.i18nOutFormat || null;\n      const bundle = this.compiler.emitMessageBundle(this.analyzedModules, locale);\n      i18nExtract(format, file, this.host, this.options, bundle);\n    }\n    const emitSkippedResult = {emitSkipped: true, diagnostics: [], emittedFiles: []};\n    if ((emitFlags & (EmitFlags.JS | EmitFlags.DTS | EmitFlags.Metadata | EmitFlags.Codegen)) ===\n        0) {\n      return emitSkippedResult;\n    }\n    const {srcFilesToEmit, jsonFilesToEmit, emitAllFiles} = this.calcFilesToEmit(targetFileNames);\n\n    const outSrcMapping: Array<{sourceFile: ts.SourceFile, outFileName: string}> = [];\n    const writeTsFile: ts.WriteFileCallback =\n        (outFileName, outData, writeByteOrderMark, onError?, sourceFiles?) => {\n          const sourceFile = sourceFiles && sourceFiles.length == 1 ? sourceFiles[0] : null;\n          let genFile: GeneratedFile|undefined;\n          if (sourceFile) {\n            outSrcMapping.push({outFileName: outFileName, sourceFile});\n            if (emitFlags & EmitFlags.Codegen) {\n              genFile = this.getGeneratedFile(sourceFile.fileName);\n            }\n          }\n          this.writeFile(outFileName, outData, writeByteOrderMark, onError, sourceFiles, genFile);\n        };\n    const tsCustomTansformers = this.calculateTransforms(customTransformers);\n    const emitOnlyDtsFiles = (emitFlags & (EmitFlags.DTS | EmitFlags.JS)) == EmitFlags.DTS;\n    // Restore the original references before we emit so TypeScript doesn't emit\n    // a reference to the .d.ts file.\n    const augmentedReferences = new Map<ts.SourceFile, ts.FileReference[]>();\n    for (const sourceFile of srcFilesToEmit) {\n      const originalReferences = getOriginalReferences(sourceFile);\n      if (originalReferences) {\n        augmentedReferences.set(sourceFile, sourceFile.referencedFiles);\n        sourceFile.referencedFiles = originalReferences;\n      }\n    }\n    let emitResult: ts.EmitResult;\n    try {\n      emitResult = emitCallback({\n        program: this.tsProgram,\n        host: this.host,\n        options: this.options,\n        writeFile: writeTsFile, emitOnlyDtsFiles,\n        customTransformers: tsCustomTansformers,\n        targetSourceFiles: emitAllFiles ? undefined : srcFilesToEmit,\n      });\n    } finally {\n      // Restore the references back to the augmented value to ensure that the\n      // checks that TypeScript makes for project structure reuse will succeed.\n      for (const [sourceFile, references] of Array.from(augmentedReferences)) {\n        sourceFile.referencedFiles = references;\n      }\n    }\n\n    if (!outSrcMapping.length) {\n      // if no files were emitted by TypeScript, also don't emit .json files\n      emitResult.diagnostics.push(createMessageDiagnostic(`Emitted no files.`));\n      return emitResult;\n    }\n\n    let sampleSrcFileName: string|undefined;\n    let sampleOutFileName: string|undefined;\n    if (outSrcMapping.length) {\n      sampleSrcFileName = outSrcMapping[0].sourceFile.fileName;\n      sampleOutFileName = outSrcMapping[0].outFileName;\n    }\n    const srcToOutPath =\n        createSrcToOutPathMapper(this.options.outDir, sampleSrcFileName, sampleOutFileName);\n    if (emitFlags & EmitFlags.Codegen) {\n      this.emitNgSummaryJsonFiles(jsonFilesToEmit, srcToOutPath);\n    }\n    if (emitFlags & EmitFlags.Metadata) {\n      this.emitMetadataJsonFiles(srcFilesToEmit, srcToOutPath);\n    }\n    const emitEnd = Date.now();\n    if (this.options.diagnostics) {\n      const genTsFileCount = srcFilesToEmit.filter(sf => GENERATED_FILES.test(sf.fileName)).length;\n      let genJsonCount = jsonFilesToEmit.length;\n      if (emitFlags & EmitFlags.Metadata) {\n        genJsonCount += genTsFileCount;\n      }\n      emitResult.diagnostics.push(createMessageDiagnostic([\n        `Emitted in ${emitEnd - emitStart}ms`,\n        `- ${srcFilesToEmit.length - genTsFileCount} user ts files`,\n        `- ${genTsFileCount} generated ts files`,\n        `- ${genJsonCount} generated json files`,\n      ].join('\\n')));\n    }\n    return emitResult;\n  }\n\n  private emitNgSummaryJsonFiles(\n      jsonFilesToEmit: GeneratedFile[], srcToOutPath: (srcFileName: string) => string) {\n    for (const gf of jsonFilesToEmit) {\n      const outFileName = srcToOutPath(gf.genFileName);\n      this.writeFile(outFileName, gf.source !, false, undefined, undefined, gf);\n    }\n  }\n\n  private emitMetadataJsonFiles(\n      srcFilesToEmit: ts.SourceFile[], srcToOutPath: (srcFileName: string) => string) {\n    for (const sf of srcFilesToEmit) {\n      if (!GENERATED_FILES.test(sf.fileName)) {\n        const metadata = this.metadataCache.getMetadata(sf);\n        const metadataText = JSON.stringify([metadata]);\n        const outFileName = srcToOutPath(sf.fileName.replace(/\\.ts$/, '.metadata.json'));\n        this.writeFile(outFileName, metadataText, false);\n      }\n    }\n  }\n\n  private calcFilesToEmit(targetFileNames?: string[]):\n      {srcFilesToEmit: ts.SourceFile[]; jsonFilesToEmit: GeneratedFile[]; emitAllFiles: boolean;} {\n    let srcFilesToEmit: ts.SourceFile[];\n    let jsonFilesToEmit: GeneratedFile[];\n    let emitAllFiles: boolean;\n    if (targetFileNames) {\n      emitAllFiles = false;\n      srcFilesToEmit = [];\n      jsonFilesToEmit = [];\n      for (const fileName of targetFileNames) {\n        const sf = this.tsProgram.getSourceFile(fileName);\n        if (!sf || sf.isDeclarationFile) continue;\n        srcFilesToEmit.push(sf);\n        if (!GENERATED_FILES.test(sf.fileName)) {\n          // find the .ngsummary.json file and mark it for emit as well\n          const ngSummaryFileName = sf.fileName.replace(EXT, '') + '.ngsummary.json';\n          const ngSummaryGenFile = this.getGeneratedFile(ngSummaryFileName);\n          if (ngSummaryGenFile) {\n            jsonFilesToEmit.push(ngSummaryGenFile);\n          }\n        }\n      }\n    } else {\n      const changedFiles: ts.SourceFile[] = [];\n      let useChangedFiles = !!this.oldProgramCachedFiles;\n      if (useChangedFiles) {\n        for (const sf of this.tsProgram.getSourceFiles()) {\n          if (sf.isDeclarationFile) continue;\n          if (this.hasChanged(sf.fileName)) {\n            changedFiles.push(sf);\n          }\n          if (changedFiles.length > MAX_FILE_COUNT_FOR_SINGLE_FILE_EMIT) {\n            useChangedFiles = false;\n            break;\n          }\n        }\n      }\n      if (useChangedFiles) {\n        emitAllFiles = false;\n        srcFilesToEmit = changedFiles;\n        jsonFilesToEmit = this.getGeneratedFiles().filter(\n            genFile => !!genFile.source && this.hasChanged(genFile.genFileName));\n      } else {\n        emitAllFiles = true;\n        srcFilesToEmit = this.tsProgram.getSourceFiles().filter(sf => !sf.isDeclarationFile);\n        jsonFilesToEmit = this.getGeneratedFiles().filter(genFile => !!genFile.source);\n      }\n    }\n    return {srcFilesToEmit, jsonFilesToEmit, emitAllFiles};\n  }\n\n  // Private members\n  private get compiler(): AotCompiler {\n    if (!this._compiler) {\n      this.initSync();\n    }\n    return this._compiler !;\n  }\n\n  private get analyzedModules(): NgAnalyzedModules {\n    if (!this._analyzedModules) {\n      this.initSync();\n    }\n    return this._analyzedModules !;\n  }\n\n  private get structuralDiagnostics(): Diagnostic[] {\n    if (!this._structuralDiagnostics) {\n      this.initSync();\n    }\n    return this._structuralDiagnostics !;\n  }\n\n  private get tsProgram(): ts.Program {\n    if (!this._tsProgram) {\n      this.initSync();\n    }\n    return this._tsProgram !;\n  }\n\n  private get typeCheckHost(): TypeCheckHost {\n    if (!this._typeCheckHost) {\n      this.initSync();\n    }\n    return this._typeCheckHost !;\n  }\n\n  private get generatedFilesMap(): Map<string, GeneratedFile> {\n    if (!this._generatedFilesMap) {\n      this.createGenerateFiles();\n    }\n    return this._generatedFilesMap !;\n  }\n\n  private get generatedFiles(): GeneratedFile[] {\n    if (!this._generatedFilesMap) {\n      this.createGenerateFiles();\n    }\n    return this._generatedFiles !;\n  }\n\n  private calculateTransforms(customTransformers?: CustomTransformers): ts.CustomTransformers {\n    const beforeTs: ts.TransformerFactory<ts.SourceFile>[] = [];\n    if (!this.options.disableExpressionLowering) {\n      beforeTs.push(getExpressionLoweringTransformFactory(this.metadataCache));\n    }\n    beforeTs.push(getAngularEmitterTransformFactory(this));\n    if (customTransformers && customTransformers.beforeTs) {\n      beforeTs.push(...customTransformers.beforeTs);\n    }\n    const afterTs = customTransformers ? customTransformers.afterTs : undefined;\n    return {before: beforeTs, after: afterTs};\n  }\n\n  private initSync() {\n    if (this._analyzedModules) {\n      return;\n    }\n    const {tmpProgram, sourceFiles, hostAdapter, rootNames} = this._createProgramWithBasicStubs();\n    let analyzedModules: NgAnalyzedModules|null;\n    try {\n      analyzedModules = this._compiler.loadFilesSync(sourceFiles);\n    } catch (e) {\n      analyzedModules = this.catchAnalysisError(e);\n    }\n    this._updateProgramWithTypeCheckStubs(tmpProgram, analyzedModules, hostAdapter, rootNames);\n  }\n\n  private _createProgramWithBasicStubs(): {\n    tmpProgram: ts.Program,\n    hostAdapter: TsCompilerAotCompilerTypeCheckHostAdapter,\n    rootNames: string[],\n    sourceFiles: string[],\n  } {\n    if (this._analyzedModules) {\n      throw new Error(`Internal Error: already initalized!`);\n    }\n    // Note: This is important to not produce a memory leak!\n    const oldTsProgram = this.oldTsProgram;\n    this.oldTsProgram = undefined;\n\n    const codegen: CodeGenerator = {\n      generateFile: (genFileName, baseFileName) =>\n                        this._compiler.emitBasicStub(genFileName, baseFileName),\n      findGeneratedFileNames: (fileName) => this._compiler.findGeneratedFileNames(fileName),\n    };\n\n    const hostAdapter = new TsCompilerAotCompilerTypeCheckHostAdapter(\n        this.rootNames, this.options, this.host, this.metadataCache, codegen,\n        this.oldProgramLibrarySummaries);\n    const aotOptions = getAotCompilerOptions(this.options);\n    this._compiler = createAotCompiler(hostAdapter, aotOptions).compiler;\n    this._typeCheckHost = hostAdapter;\n    this._structuralDiagnostics = [];\n\n    let rootNames =\n        this.rootNames.filter(fn => !GENERATED_FILES.test(fn) || !hostAdapter.isSourceFile(fn));\n    if (this.options.noResolve) {\n      for (const rootName of this.rootNames) {\n        if (hostAdapter.shouldGenerateFilesFor(rootName)) {\n          rootNames.push(...this._compiler.findGeneratedFileNames(rootName));\n        }\n      }\n    }\n\n    const tmpProgram = ts.createProgram(rootNames, this.options, hostAdapter, oldTsProgram);\n    const sourceFiles: string[] = [];\n    for (const sf of tmpProgram.getSourceFiles()) {\n      if (hostAdapter.isSourceFile(sf.fileName)) {\n        sourceFiles.push(sf.fileName);\n      }\n    }\n    return {tmpProgram, sourceFiles, hostAdapter, rootNames};\n  }\n\n  private _updateProgramWithTypeCheckStubs(\n      tmpProgram: ts.Program, analyzedModules: NgAnalyzedModules|null,\n      hostAdapter: TsCompilerAotCompilerTypeCheckHostAdapter, rootNames: string[]) {\n    this._analyzedModules = analyzedModules || emptyModules;\n    if (analyzedModules) {\n      for (const sf of tmpProgram.getSourceFiles()) {\n        if (sf.fileName.endsWith('.ngfactory.ts')) {\n          const {generate, baseFileName} = hostAdapter.shouldGenerateFile(sf.fileName);\n          if (generate) {\n            // Note: ! is ok as hostAdapter.shouldGenerateFile will always return a basefileName\n            // for .ngfactory.ts files.\n            const genFile = this._compiler.emitTypeCheckStub(sf.fileName, baseFileName !);\n            if (genFile) {\n              hostAdapter.updateGeneratedFile(genFile);\n            }\n          }\n        }\n      }\n    }\n    this._tsProgram = ts.createProgram(rootNames, this.options, hostAdapter, tmpProgram);\n    // Note: the new ts program should be completely reusable by TypeScript as:\n    // - we cache all the files in the hostAdapter\n    // - new new stubs use the exactly same imports/exports as the old once (we assert that in\n    // hostAdapter.updateGeneratedFile).\n    if (tsStructureIsReused(tmpProgram) !== StructureIsReused.Completely) {\n      throw new Error(`Internal Error: The structure of the program changed during codegen.`);\n    }\n  }\n\n  private catchAnalysisError(e: any): NgAnalyzedModules|null {\n    if (isSyntaxError(e)) {\n      const parserErrors = getParseErrors(e);\n      if (parserErrors && parserErrors.length) {\n        this._structuralDiagnostics =\n            parserErrors.map<Diagnostic>(e => ({\n                                           messageText: e.contextualMessage(),\n                                           category: ts.DiagnosticCategory.Error,\n                                           span: e.span,\n                                           source: SOURCE,\n                                           code: DEFAULT_ERROR_CODE\n                                         }));\n      } else {\n        this._structuralDiagnostics = [{\n          messageText: e.message,\n          category: ts.DiagnosticCategory.Error,\n          source: SOURCE,\n          code: DEFAULT_ERROR_CODE\n        }];\n      }\n      return null;\n    }\n    throw e;\n  }\n\n  private createGenerateFiles() {\n    this._generatedFiles = this.compiler.emitAllImpls(this.analyzedModules);\n    this._generatedFilesMap = new Map<string, GeneratedFile>();\n    for (const genFile of this._generatedFiles) {\n      this._generatedFilesMap !.set(genFile.genFileName, genFile);\n    }\n  }\n\n  private writeFile(\n      outFileName: string, outData: string, writeByteOrderMark: boolean,\n      onError?: (message: string) => void, sourceFiles?: ts.SourceFile[], genFile?: GeneratedFile) {\n    const isGenerated = GENERATED_FILES.test(outFileName);\n    if (!isGenerated && sourceFiles && sourceFiles.length === 1) {\n      const sf = sourceFiles[0];\n      if (!this.emittedSourceFiles) {\n        this.emittedSourceFiles = [];\n      }\n      // Note: sourceFile is the transformed sourcefile, not the original one!\n      this.emittedSourceFiles.push(this.tsProgram.getSourceFile(sf.fileName));\n    }\n    // collect emittedLibrarySummaries\n    let baseFile: ts.SourceFile|undefined;\n    if (genFile) {\n      baseFile = this.tsProgram.getSourceFile(genFile.srcFileName);\n      if (baseFile) {\n        if (!this.emittedLibrarySummaries) {\n          this.emittedLibrarySummaries = [];\n        }\n        if (genFile.genFileName.endsWith('.ngsummary.json') &&\n            baseFile.fileName.endsWith('.d.ts')) {\n          this.emittedLibrarySummaries.push({\n            fileName: baseFile.fileName,\n            text: baseFile.text,\n            sourceFile: baseFile,\n          });\n          this.emittedLibrarySummaries.push({fileName: genFile.genFileName, text: outData});\n          if (!this.options.declaration) {\n            // If we don't emit declarations, still record an empty .ngfactory.d.ts file,\n            // as we might need it lateron for resolving module names from summaries.\n            const ngFactoryDts = genFile.genFileName.substring(0, genFile.genFileName.length - 15) +\n                '.ngfactory.d.ts';\n            this.emittedLibrarySummaries.push({fileName: ngFactoryDts, text: ''});\n          }\n        } else if (outFileName.endsWith('.d.ts') && baseFile.fileName.endsWith('.d.ts')) {\n          const dtsSourceFilePath = genFile.genFileName.replace(/\\.ts$/, '.d.ts');\n          // Note: Don't use sourceFiles here as the created .d.ts has a path in the outDir,\n          // but we need one that is next to the .ts file\n          this.emittedLibrarySummaries.push({fileName: dtsSourceFilePath, text: outData});\n        }\n      }\n      if (!this.emittedGeneratedFiles) {\n        this.emittedGeneratedFiles = [];\n      }\n      this.emittedGeneratedFiles.push(genFile);\n    }\n    // Filter out generated files for which we didn't generate code.\n    // This can happen as the stub calculation is not completely exact.\n    // Note: sourceFile refers to the .ngfactory.ts / .ngsummary.ts file\n    if (isGenerated) {\n      if (!genFile || !genFile.stmts || genFile.stmts.length === 0) {\n        if (this.options.allowEmptyCodegenFiles) {\n          outData = '';\n        } else {\n          return;\n        }\n      }\n    }\n    if (baseFile) {\n      sourceFiles = sourceFiles ? [...sourceFiles, baseFile] : [baseFile];\n    }\n    this.host.writeFile(outFileName, outData, writeByteOrderMark, onError, sourceFiles);\n  }\n}\n\nexport const createProgram: CreateProgram = ({rootNames, options, host, oldProgram}: {\n  rootNames: string[],\n  options: CompilerOptions,\n  host: CompilerHost, oldProgram?: OldProgram\n}) => {\n  return new AngularCompilerProgram(rootNames, options, host, oldProgram);\n};\n\n// Compute the AotCompiler options\nfunction getAotCompilerOptions(options: CompilerOptions): AotCompilerOptions {\n  let missingTranslation = core.MissingTranslationStrategy.Warning;\n\n  switch (options.i18nInMissingTranslations) {\n    case 'ignore':\n      missingTranslation = core.MissingTranslationStrategy.Ignore;\n      break;\n    case 'error':\n      missingTranslation = core.MissingTranslationStrategy.Error;\n      break;\n  }\n\n  let translations: string = '';\n\n  if (options.i18nInFile) {\n    if (!options.i18nInLocale) {\n      throw new Error(`The translation file (${options.i18nInFile}) locale must be provided.`);\n    }\n    translations = fs.readFileSync(options.i18nInFile, 'utf8');\n  } else {\n    // No translations are provided, ignore any errors\n    // We still go through i18n to remove i18n attributes\n    missingTranslation = core.MissingTranslationStrategy.Ignore;\n  }\n\n  return {\n    locale: options.i18nInLocale,\n    i18nFormat: options.i18nInFormat || options.i18nOutFormat, translations, missingTranslation,\n    enableLegacyTemplate: options.enableLegacyTemplate,\n    enableSummariesForJit: options.enableSummariesForJit,\n    preserveWhitespaces: options.preserveWhitespaces,\n    fullTemplateTypeCheck: options.fullTemplateTypeCheck,\n    allowEmptyCodegenFiles: options.allowEmptyCodegenFiles,\n  };\n}\n\nfunction getNgOptionDiagnostics(options: CompilerOptions): Diagnostic[] {\n  if (options.annotationsAs) {\n    switch (options.annotationsAs) {\n      case 'decorators':\n      case 'static fields':\n        break;\n      default:\n        return [{\n          messageText:\n              'Angular compiler options \"annotationsAs\" only supports \"static fields\" and \"decorators\"',\n          category: ts.DiagnosticCategory.Error,\n          source: SOURCE,\n          code: DEFAULT_ERROR_CODE\n        }];\n    }\n  }\n  return [];\n}\n\n/**\n * Returns a function that can adjust a path from source path to out path,\n * based on an existing mapping from source to out path.\n *\n * TODO(tbosch): talk to the TypeScript team to expose their logic for calculating the `rootDir`\n * if none was specified.\n *\n * Note: This function works on normalized paths from typescript.\n *\n * @param outDir\n * @param outSrcMappings\n */\nexport function createSrcToOutPathMapper(\n    outDir: string | undefined, sampleSrcFileName: string | undefined,\n    sampleOutFileName: string | undefined, host: {\n      dirname: typeof path.dirname,\n      resolve: typeof path.resolve,\n      relative: typeof path.relative\n    } = path): (srcFileName: string) => string {\n  let srcToOutPath: (srcFileName: string) => string;\n  if (outDir) {\n    if (sampleSrcFileName == null || sampleOutFileName == null) {\n      throw new Error(`Can't calculate the rootDir without a sample srcFileName / outFileName. `);\n    }\n    const srcFileDir = host.dirname(sampleSrcFileName).replace(/\\\\/g, '/');\n    const outFileDir = host.dirname(sampleOutFileName).replace(/\\\\/g, '/');\n    if (srcFileDir === outFileDir) {\n      return (srcFileName) => srcFileName;\n    }\n    const srcDirParts = srcFileDir.split('/');\n    const outDirParts = outFileDir.split('/');\n    // calculate the common suffix\n    let i = 0;\n    while (i < Math.min(srcDirParts.length, outDirParts.length) &&\n           srcDirParts[srcDirParts.length - 1 - i] === outDirParts[outDirParts.length - 1 - i])\n      i++;\n    const rootDir = srcDirParts.slice(0, srcDirParts.length - i).join('/');\n    srcToOutPath = (srcFileName) => host.resolve(outDir, host.relative(rootDir, srcFileName));\n  } else {\n    srcToOutPath = (srcFileName) => srcFileName;\n  }\n  return srcToOutPath;\n}\n\nexport function i18nExtract(\n    formatName: string | null, outFile: string | null, host: ts.CompilerHost,\n    options: CompilerOptions, bundle: MessageBundle): string[] {\n  formatName = formatName || 'null';\n  // Checks the format and returns the extension\n  const ext = i18nGetExtension(formatName);\n  const content = i18nSerialize(bundle, formatName, options);\n  const dstFile = outFile || `messages.${ext}`;\n  const dstPath = path.resolve(options.outDir || options.basePath, dstFile);\n  host.writeFile(dstPath, content, false);\n  return [dstPath];\n}\n\nexport function i18nSerialize(\n    bundle: MessageBundle, formatName: string, options: CompilerOptions): string {\n  const format = formatName.toLowerCase();\n  let serializer: Serializer;\n\n  switch (format) {\n    case 'xmb':\n      serializer = new Xmb();\n      break;\n    case 'xliff2':\n    case 'xlf2':\n      serializer = new Xliff2();\n      break;\n    case 'xlf':\n    case 'xliff':\n    default:\n      serializer = new Xliff();\n  }\n  return bundle.write(\n      serializer, (sourcePath: string) =>\n                      options.basePath ? path.relative(options.basePath, sourcePath) : sourcePath);\n}\n\nexport function i18nGetExtension(formatName: string): string {\n  const format = (formatName || 'xlf').toLowerCase();\n\n  switch (format) {\n    case 'xmb':\n      return 'xmb';\n    case 'xlf':\n    case 'xlif':\n    case 'xliff':\n    case 'xlf2':\n    case 'xliff2':\n      return 'xlf';\n  }\n\n  throw new Error(`Unsupported format \"${formatName}\"`);\n}\n"]}