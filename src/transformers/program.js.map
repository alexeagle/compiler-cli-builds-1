{"version":3,"file":"program.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/program.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AotCompiler, AotCompilerHost, AotCompilerOptions, EmitterVisitorContext, GeneratedFile, MessageBundle, NgAnalyzedFile, NgAnalyzedModules, ParseSourceSpan, Serializer, TypeScriptEmitter, Xliff, Xliff2, Xmb, core, createAotCompiler, getParseErrors, isSyntaxError} from '@angular/compiler';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {TypeCheckHost, translateDiagnostics} from '../diagnostics/translate_diagnostics';\nimport {ModuleMetadata, createBundleIndexHost} from '../metadata/index';\n\nimport {CompilerHost, CompilerOptions, CustomTransformers, DEFAULT_ERROR_CODE, Diagnostic, EmitFlags, Program, SOURCE, TsEmitArguments, TsEmitCallback} from './api';\nimport {TsCompilerAotCompilerTypeCheckHostAdapter, getOriginalReferences} from './compiler_host';\nimport {LowerMetadataCache, getExpressionLoweringTransformFactory} from './lower_expressions';\nimport {getAngularEmitterTransformFactory} from './node_emitter_transform';\nimport {GENERATED_FILES, StructureIsReused, tsStructureIsReused} from './util';\n\nconst emptyModules: NgAnalyzedModules = {\n  ngModules: [],\n  ngModuleByPipeOrDirective: new Map(),\n  files: []\n};\n\nconst defaultEmitCallback: TsEmitCallback =\n    ({program, targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles,\n      customTransformers}) =>\n        program.emit(\n            targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers);\n\n\nclass AngularCompilerProgram implements Program {\n  private metadataCache: LowerMetadataCache;\n  private summariesFromPreviousCompilations = new Map<string, string>();\n  // Note: This will be cleared out as soon as we create the _tsProgram\n  private oldTsProgram: ts.Program|undefined;\n  private _emittedGenFiles: GeneratedFile[]|undefined;\n\n  // Lazily initialized fields\n  private _typeCheckHost: TypeCheckHost;\n  private _compiler: AotCompiler;\n  private _tsProgram: ts.Program;\n  private _analyzedModules: NgAnalyzedModules|undefined;\n  private _structuralDiagnostics: Diagnostic[]|undefined;\n  private _programWithStubs: ts.Program|undefined;\n  private _semanticDiagnostics: {ts: ts.Diagnostic[], ng: Diagnostic[]}|undefined;\n  private _optionsDiagnostics: Diagnostic[] = [];\n\n  constructor(\n      private rootNames: string[], private options: CompilerOptions, private host: CompilerHost,\n      private oldProgram?: Program) {\n    const [major, minor] = ts.version.split('.');\n    if (Number(major) < 2 || (Number(major) === 2 && Number(minor) < 4)) {\n      throw new Error('The Angular Compiler requires TypeScript >= 2.4.');\n    }\n    this.oldTsProgram = oldProgram ? oldProgram.getTsProgram() : undefined;\n    if (oldProgram) {\n      oldProgram.getLibrarySummaries().forEach(\n          ({content, fileName}) => this.summariesFromPreviousCompilations.set(fileName, content));\n    }\n\n    if (options.flatModuleOutFile) {\n      const {host: bundleHost, indexName, errors} = createBundleIndexHost(options, rootNames, host);\n      if (errors) {\n        // TODO(tbosch): once we move MetadataBundler from tsc_wrapped into compiler_cli,\n        // directly create ng.Diagnostic instead of using ts.Diagnostic here.\n        this._optionsDiagnostics.push(...errors.map(e => ({\n                                                      category: e.category,\n                                                      messageText: e.messageText as string,\n                                                      source: SOURCE,\n                                                      code: DEFAULT_ERROR_CODE\n                                                    })));\n      } else {\n        rootNames.push(indexName !);\n        this.host = bundleHost;\n      }\n    }\n    this.metadataCache = new LowerMetadataCache({quotedNames: true}, !!options.strictMetadataEmit);\n  }\n\n  getLibrarySummaries(): {fileName: string, content: string}[] {\n    const emittedLibSummaries: {fileName: string, content: string}[] = [];\n    this.summariesFromPreviousCompilations.forEach(\n        (content, fileName) => emittedLibSummaries.push({fileName, content}));\n    if (this._emittedGenFiles) {\n      this._emittedGenFiles.forEach(genFile => {\n        if (genFile.srcFileUrl.endsWith('.d.ts') &&\n            genFile.genFileUrl.endsWith('.ngsummary.json')) {\n          // Note: ! is ok here as ngsummary.json files are always plain text, so genFile.source\n          // is filled.\n          emittedLibSummaries.push({fileName: genFile.genFileUrl, content: genFile.source !});\n        }\n      });\n    }\n    return emittedLibSummaries;\n  }\n\n  getTsProgram(): ts.Program { return this.tsProgram; }\n\n  getTsOptionDiagnostics(cancellationToken?: ts.CancellationToken) {\n    return this.tsProgram.getOptionsDiagnostics(cancellationToken);\n  }\n\n  getNgOptionDiagnostics(cancellationToken?: ts.CancellationToken): Diagnostic[] {\n    return [...this._optionsDiagnostics, ...getNgOptionDiagnostics(this.options)];\n  }\n\n  getTsSyntacticDiagnostics(sourceFile?: ts.SourceFile, cancellationToken?: ts.CancellationToken):\n      ts.Diagnostic[] {\n    return this.tsProgram.getSyntacticDiagnostics(sourceFile, cancellationToken);\n  }\n\n  getNgStructuralDiagnostics(cancellationToken?: ts.CancellationToken): Diagnostic[] {\n    return this.structuralDiagnostics;\n  }\n\n  getTsSemanticDiagnostics(sourceFile?: ts.SourceFile, cancellationToken?: ts.CancellationToken):\n      ts.Diagnostic[] {\n    return this.semanticDiagnostics.ts;\n  }\n\n  getNgSemanticDiagnostics(fileName?: string, cancellationToken?: ts.CancellationToken):\n      Diagnostic[] {\n    return this.semanticDiagnostics.ng;\n  }\n\n  loadNgStructureAsync(): Promise<void> {\n    if (this._analyzedModules) {\n      throw new Error('Angular structure already loaded');\n    }\n    const {tmpProgram, analyzedFiles, hostAdapter, rootNames} = this._createProgramWithBasicStubs();\n    return this._compiler.loadFilesAsync(analyzedFiles)\n        .catch(this.catchAnalysisError.bind(this))\n        .then(analyzedModules => {\n          if (this._analyzedModules) {\n            throw new Error('Angular structure loaded both synchronously and asynchronsly');\n          }\n          this._updateProgramWithTypeCheckStubs(\n              tmpProgram, analyzedModules, hostAdapter, rootNames);\n        });\n  }\n\n  emit(\n      {emitFlags = EmitFlags.Default, cancellationToken, customTransformers,\n       emitCallback = defaultEmitCallback}: {\n        emitFlags?: EmitFlags,\n        cancellationToken?: ts.CancellationToken,\n        customTransformers?: CustomTransformers,\n        emitCallback?: TsEmitCallback\n      } = {}): ts.EmitResult {\n    if (emitFlags & EmitFlags.I18nBundle) {\n      const locale = this.options.i18nOutLocale || null;\n      const file = this.options.i18nOutFile || null;\n      const format = this.options.i18nOutFormat || null;\n      const bundle = this.compiler.emitMessageBundle(this.analyzedModules, locale);\n      i18nExtract(format, file, this.host, this.options, bundle);\n    }\n    const outSrcMapping: Array<{sourceFile: ts.SourceFile, outFileName: string}> = [];\n    if ((emitFlags & (EmitFlags.JS | EmitFlags.DTS | EmitFlags.Metadata | EmitFlags.Codegen)) ===\n        0) {\n      return {emitSkipped: true, diagnostics: [], emittedFiles: []};\n    }\n    const {genFiles, genDiags} = this.generateFilesForEmit(emitFlags);\n    if (genDiags.length) {\n      return {\n        diagnostics: genDiags,\n        emitSkipped: true,\n        emittedFiles: [],\n      };\n    }\n\n    // Restore the original references before we emit so TypeScript doesn't emit\n    // a reference to the .d.ts file.\n    const augmentedReferences = new Map<ts.SourceFile, ts.FileReference[]>();\n    for (const sourceFile of this.tsProgram.getSourceFiles()) {\n      const originalReferences = getOriginalReferences(sourceFile);\n      if (originalReferences) {\n        augmentedReferences.set(sourceFile, sourceFile.referencedFiles);\n        sourceFile.referencedFiles = originalReferences;\n      }\n    }\n\n    let emitResult: ts.EmitResult;\n    try {\n      emitResult = emitCallback({\n        program: this.tsProgram,\n        host: this.host,\n        options: this.options,\n        writeFile: createWriteFileCallback(genFiles, this.host, outSrcMapping),\n        emitOnlyDtsFiles: (emitFlags & (EmitFlags.DTS | EmitFlags.JS)) == EmitFlags.DTS,\n        customTransformers: this.calculateTransforms(genFiles, customTransformers)\n      });\n    } finally {\n      // Restore the references back to the augmented value to ensure that the\n      // checks that TypeScript makes for project structure reuse will succeed.\n      for (const [sourceFile, references] of Array.from(augmentedReferences)) {\n        sourceFile.referencedFiles = references;\n      }\n    }\n\n    if (!outSrcMapping.length) {\n      // if no files were emitted by TypeScript, also don't emit .json files\n      return emitResult;\n    }\n\n    const srcToOutPath = this.createSrcToOutPathMapper(outSrcMapping);\n    if (emitFlags & EmitFlags.Codegen) {\n      genFiles.forEach(gf => {\n        if (gf.source) {\n          this.host.writeFile(srcToOutPath(gf.genFileUrl), gf.source, false);\n        }\n      });\n    }\n    if (emitFlags & EmitFlags.Metadata) {\n      this.tsProgram.getSourceFiles().forEach(sf => {\n        if (!sf.isDeclarationFile && !GENERATED_FILES.test(sf.fileName)) {\n          const metadata = this.metadataCache.getMetadata(sf);\n          const metadataText = JSON.stringify([metadata]);\n          this.host.writeFile(\n              srcToOutPath(sf.fileName.replace(/\\.ts$/, '.metadata.json')), metadataText, false);\n        }\n      });\n    }\n    return emitResult;\n  }\n\n  // Private members\n  private get compiler(): AotCompiler {\n    if (!this._compiler) {\n      this.initSync();\n    }\n    return this._compiler !;\n  }\n\n  private get analyzedModules(): NgAnalyzedModules {\n    if (!this._analyzedModules) {\n      this.initSync();\n    }\n    return this._analyzedModules !;\n  }\n\n  private get structuralDiagnostics(): Diagnostic[] {\n    if (!this._structuralDiagnostics) {\n      this.initSync();\n    }\n    return this._structuralDiagnostics !;\n  }\n\n  private get tsProgram(): ts.Program {\n    if (!this._tsProgram) {\n      this.initSync();\n    }\n    return this._tsProgram !;\n  }\n\n  private get typeCheckHost(): TypeCheckHost {\n    if (!this._typeCheckHost) {\n      this.initSync();\n    }\n    return this._typeCheckHost !;\n  }\n\n  private get semanticDiagnostics(): {ts: ts.Diagnostic[], ng: Diagnostic[]} {\n    return this._semanticDiagnostics ||\n        (this._semanticDiagnostics = this.generateSemanticDiagnostics());\n  }\n\n  private calculateTransforms(genFiles: GeneratedFile[], customTransformers?: CustomTransformers):\n      ts.CustomTransformers {\n    const beforeTs: ts.TransformerFactory<ts.SourceFile>[] = [];\n    if (!this.options.disableExpressionLowering) {\n      beforeTs.push(getExpressionLoweringTransformFactory(this.metadataCache));\n    }\n    beforeTs.push(getAngularEmitterTransformFactory(genFiles));\n    if (customTransformers && customTransformers.beforeTs) {\n      beforeTs.push(...customTransformers.beforeTs);\n    }\n    const afterTs = customTransformers ? customTransformers.afterTs : undefined;\n    return {before: beforeTs, after: afterTs};\n  }\n\n  private createSrcToOutPathMapper(outSrcMappings:\n                                       Array<{sourceFile: ts.SourceFile, outFileName: string}>):\n      (srcFileName: string) => string {\n    let srcToOutPath: (srcFileName: string) => string;\n    if (this.options.outDir) {\n      // TODO(tbosch): talk to TypeScript team to expose their logic for calculating the `rootDir`\n      // if none was specified.\n      if (outSrcMappings.length === 0) {\n        throw new Error(`Can't calculate the rootDir without at least one outSrcMapping. `);\n      }\n      const firstEntry = outSrcMappings[0];\n      const entrySrcDir = path.dirname(firstEntry.sourceFile.fileName);\n      const entryOutDir = path.dirname(firstEntry.outFileName);\n      const commonSuffix = longestCommonSuffix(entrySrcDir, entryOutDir);\n      const rootDir = entrySrcDir.substring(0, entrySrcDir.length - commonSuffix.length);\n      srcToOutPath = (srcFileName) =>\n          path.resolve(this.options.outDir, path.relative(rootDir, srcFileName));\n    } else {\n      srcToOutPath = (srcFileName) => srcFileName;\n    }\n    return srcToOutPath;\n  }\n\n  private initSync() {\n    if (this._analyzedModules) {\n      return;\n    }\n    const {tmpProgram, analyzedFiles, hostAdapter, rootNames} = this._createProgramWithBasicStubs();\n    let analyzedModules: NgAnalyzedModules;\n    try {\n      analyzedModules = this._compiler.loadFilesSync(analyzedFiles);\n    } catch (e) {\n      analyzedModules = this.catchAnalysisError(e);\n    }\n    this._updateProgramWithTypeCheckStubs(tmpProgram, analyzedModules, hostAdapter, rootNames);\n  }\n\n  private _createProgramWithBasicStubs(): {\n    tmpProgram: ts.Program,\n    analyzedFiles: NgAnalyzedFile[],\n    hostAdapter: TsCompilerAotCompilerTypeCheckHostAdapter,\n    rootNames: string[],\n  } {\n    if (this._analyzedModules) {\n      throw new Error(`Internal Error: already initalized!`);\n    }\n    // Note: This is important to not produce a memory leak!\n    const oldTsProgram = this.oldTsProgram;\n    this.oldTsProgram = undefined;\n    const analyzedFiles: NgAnalyzedFile[] = [];\n    const codegen = (fileName: string) => {\n      if (this._analyzedModules) {\n        throw new Error(`Internal Error: already initalized!`);\n      }\n      const analyzedFile = this._compiler.analyzeFile(fileName);\n      analyzedFiles.push(analyzedFile);\n      const debug = fileName.endsWith('application_ref.ts');\n      return this._compiler.emitBasicStubs(analyzedFile);\n    };\n    const hostAdapter = new TsCompilerAotCompilerTypeCheckHostAdapter(\n        this.rootNames, this.options, this.host, this.metadataCache, codegen,\n        this.summariesFromPreviousCompilations);\n    const aotOptions = getAotCompilerOptions(this.options);\n    this._compiler = createAotCompiler(hostAdapter, aotOptions).compiler;\n    this._typeCheckHost = hostAdapter;\n    this._structuralDiagnostics = [];\n\n    let rootNames =\n        this.rootNames.filter(fn => !GENERATED_FILES.test(fn) || !hostAdapter.isSourceFile(fn));\n    if (this.options.noResolve) {\n      this.rootNames.forEach(rootName => {\n        const sf =\n            hostAdapter.getSourceFile(rootName, this.options.target || ts.ScriptTarget.Latest);\n        sf.referencedFiles.forEach((fileRef) => {\n          if (GENERATED_FILES.test(fileRef.fileName)) {\n            rootNames.push(fileRef.fileName);\n          }\n        });\n      });\n    }\n\n    const tmpProgram = ts.createProgram(rootNames, this.options, hostAdapter, oldTsProgram);\n    return {tmpProgram, analyzedFiles, hostAdapter, rootNames};\n  }\n\n  private _updateProgramWithTypeCheckStubs(\n      tmpProgram: ts.Program, analyzedModules: NgAnalyzedModules,\n      hostAdapter: TsCompilerAotCompilerTypeCheckHostAdapter, rootNames: string[]) {\n    this._analyzedModules = analyzedModules;\n    const genFiles = this._compiler.emitTypeCheckStubs(analyzedModules);\n    genFiles.forEach(gf => hostAdapter.updateGeneratedFile(gf));\n    this._tsProgram = ts.createProgram(rootNames, this.options, hostAdapter, tmpProgram);\n    // Note: the new ts program should be completely reusable by TypeScript as:\n    // - we cache all the files in the hostAdapter\n    // - new new stubs use the exactly same imports/exports as the old once (we assert that in\n    // hostAdapter.updateGeneratedFile).\n    if (tsStructureIsReused(tmpProgram) !== StructureIsReused.Completely) {\n      throw new Error(`Internal Error: The structure of the program changed during codegen.`);\n    }\n  }\n\n  private catchAnalysisError(e: any): NgAnalyzedModules {\n    if (isSyntaxError(e)) {\n      const parserErrors = getParseErrors(e);\n      if (parserErrors && parserErrors.length) {\n        this._structuralDiagnostics =\n            parserErrors.map<Diagnostic>(e => ({\n                                           messageText: e.contextualMessage(),\n                                           category: ts.DiagnosticCategory.Error,\n                                           span: e.span,\n                                           source: SOURCE,\n                                           code: DEFAULT_ERROR_CODE\n                                         }));\n      } else {\n        this._structuralDiagnostics = [{\n          messageText: e.message,\n          category: ts.DiagnosticCategory.Error,\n          source: SOURCE,\n          code: DEFAULT_ERROR_CODE\n        }];\n      }\n      return emptyModules;\n    }\n    throw e;\n  }\n\n  // Note: this returns a ts.Diagnostic so that we\n  // can return errors in a ts.EmitResult\n  private generateFilesForEmit(emitFlags: EmitFlags):\n      {genFiles: GeneratedFile[], genDiags: ts.Diagnostic[]} {\n    try {\n      if (!(emitFlags & EmitFlags.Codegen)) {\n        return {genFiles: [], genDiags: []};\n      }\n      const genFiles = this._emittedGenFiles = this.compiler.emitAllImpls(this.analyzedModules);\n      return {genFiles, genDiags: []};\n    } catch (e) {\n      // TODO(tbosch): check whether we can actually have syntax errors here,\n      // as we already parsed the metadata and templates before to create the type check block.\n      if (isSyntaxError(e)) {\n        const genDiags: ts.Diagnostic[] = [{\n          file: undefined,\n          start: undefined,\n          length: undefined,\n          messageText: e.message,\n          category: ts.DiagnosticCategory.Error,\n          source: SOURCE,\n          code: DEFAULT_ERROR_CODE\n        }];\n        return {genFiles: [], genDiags};\n      }\n      throw e;\n    }\n  }\n\n  private generateSemanticDiagnostics(): {ts: ts.Diagnostic[], ng: Diagnostic[]} {\n    return translateDiagnostics(this.typeCheckHost, this.tsProgram.getSemanticDiagnostics());\n  }\n}\n\nexport function createProgram(\n    {rootNames, options, host, oldProgram}:\n        {rootNames: string[], options: CompilerOptions, host: CompilerHost, oldProgram?: Program}):\n    Program {\n  return new AngularCompilerProgram(rootNames, options, host, oldProgram);\n}\n\n// Compute the AotCompiler options\nfunction getAotCompilerOptions(options: CompilerOptions): AotCompilerOptions {\n  let missingTranslation = core.MissingTranslationStrategy.Warning;\n\n  switch (options.i18nInMissingTranslations) {\n    case 'ignore':\n      missingTranslation = core.MissingTranslationStrategy.Ignore;\n      break;\n    case 'error':\n      missingTranslation = core.MissingTranslationStrategy.Error;\n      break;\n  }\n\n  let translations: string = '';\n\n  if (options.i18nInFile) {\n    if (!options.i18nInLocale) {\n      throw new Error(`The translation file (${options.i18nInFile}) locale must be provided.`);\n    }\n    translations = fs.readFileSync(options.i18nInFile, 'utf8');\n  } else {\n    // No translations are provided, ignore any errors\n    // We still go through i18n to remove i18n attributes\n    missingTranslation = core.MissingTranslationStrategy.Ignore;\n  }\n\n  return {\n    locale: options.i18nInLocale,\n    i18nFormat: options.i18nInFormat || options.i18nOutFormat, translations, missingTranslation,\n    enableLegacyTemplate: options.enableLegacyTemplate,\n    enableSummariesForJit: true,\n    preserveWhitespaces: options.preserveWhitespaces,\n    fullTemplateTypeCheck: options.fullTemplateTypeCheck,\n    rootDir: options.rootDir,\n  };\n}\n\nfunction createWriteFileCallback(\n    generatedFiles: GeneratedFile[], host: ts.CompilerHost,\n    outSrcMapping: Array<{sourceFile: ts.SourceFile, outFileName: string}>) {\n  const genFileByFileName = new Map<string, GeneratedFile>();\n  generatedFiles.forEach(genFile => genFileByFileName.set(genFile.genFileUrl, genFile));\n  return (fileName: string, data: string, writeByteOrderMark: boolean,\n          onError?: (message: string) => void, sourceFiles?: ts.SourceFile[]) => {\n    const sourceFile = sourceFiles && sourceFiles.length == 1 ? sourceFiles[0] : null;\n    if (sourceFile) {\n      outSrcMapping.push({outFileName: fileName, sourceFile});\n    }\n    const isGenerated = GENERATED_FILES.test(fileName);\n    if (isGenerated && sourceFile) {\n      // Filter out generated files for which we didn't generate code.\n      // This can happen as the stub caclulation is not completely exact.\n      const genFile = genFileByFileName.get(sourceFile.fileName);\n      if (!genFile || !genFile.stmts || genFile.stmts.length === 0) {\n        return;\n      }\n    }\n    host.writeFile(fileName, data, writeByteOrderMark, onError, sourceFiles);\n  };\n}\n\nfunction getNgOptionDiagnostics(options: CompilerOptions): Diagnostic[] {\n  if (options.annotationsAs) {\n    switch (options.annotationsAs) {\n      case 'decorators':\n      case 'static fields':\n        break;\n      default:\n        return [{\n          messageText:\n              'Angular compiler options \"annotationsAs\" only supports \"static fields\" and \"decorators\"',\n          category: ts.DiagnosticCategory.Error,\n          source: SOURCE,\n          code: DEFAULT_ERROR_CODE\n        }];\n    }\n  }\n  return [];\n}\n\nfunction longestCommonSuffix(a: string, b: string): string {\n  let len = 0;\n  while (a.charCodeAt(a.length - 1 - len) === b.charCodeAt(b.length - 1 - len)) {\n    len++;\n  }\n  return a.substring(a.length - len);\n}\n\nexport function i18nExtract(\n    formatName: string | null, outFile: string | null, host: ts.CompilerHost,\n    options: CompilerOptions, bundle: MessageBundle): string[] {\n  formatName = formatName || 'null';\n  // Checks the format and returns the extension\n  const ext = i18nGetExtension(formatName);\n  const content = i18nSerialize(bundle, formatName, options);\n  const dstFile = outFile || `messages.${ext}`;\n  const dstPath = path.resolve(options.outDir || options.basePath, dstFile);\n  host.writeFile(dstPath, content, false);\n  return [dstPath];\n}\n\nexport function i18nSerialize(\n    bundle: MessageBundle, formatName: string, options: CompilerOptions): string {\n  const format = formatName.toLowerCase();\n  let serializer: Serializer;\n\n  switch (format) {\n    case 'xmb':\n      serializer = new Xmb();\n      break;\n    case 'xliff2':\n    case 'xlf2':\n      serializer = new Xliff2();\n      break;\n    case 'xlf':\n    case 'xliff':\n    default:\n      serializer = new Xliff();\n  }\n  return bundle.write(\n      serializer, (sourcePath: string) =>\n                      options.basePath ? path.relative(options.basePath, sourcePath) : sourcePath);\n}\n\nexport function i18nGetExtension(formatName: string): string {\n  const format = (formatName || 'xlf').toLowerCase();\n\n  switch (format) {\n    case 'xmb':\n      return 'xmb';\n    case 'xlf':\n    case 'xlif':\n    case 'xliff':\n    case 'xlf2':\n    case 'xliff2':\n      return 'xlf';\n  }\n\n  throw new Error(`Unsupported format \"${formatName}\"`);\n}\n"]}