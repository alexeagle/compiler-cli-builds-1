{"version":3,"file":"compiler_host.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/compiler_host.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmitterVisitorContext, ExternalReference, GeneratedFile, ParseSourceSpan, TypeScriptEmitter, collectExternalReferences, syntaxError} from '@angular/compiler';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {BaseAotCompilerHost} from '../compiler_host';\nimport {TypeCheckHost} from '../diagnostics/translate_diagnostics';\nimport {ModuleMetadata} from '../metadata/index';\n\nimport {CompilerHost, CompilerOptions} from './api';\nimport {GENERATED_FILES} from './util';\n\nconst NODE_MODULES_PACKAGE_NAME = /node_modules\\/((\\w|-)+|(@(\\w|-)+\\/(\\w|-)+))/;\nconst DTS = /\\.d\\.ts$/;\nconst EXT = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\n\nexport function createCompilerHost(\n    {options, tsHost = ts.createCompilerHost(options, true)}:\n        {options: CompilerOptions, tsHost?: ts.CompilerHost}): CompilerHost {\n  return tsHost;\n}\n\nexport interface MetadataProvider {\n  getMetadata(sourceFile: ts.SourceFile): ModuleMetadata|undefined;\n}\n\ninterface GenSourceFile {\n  externalReferences: Set<string>;\n  sourceFile: ts.SourceFile;\n  emitCtx: EmitterVisitorContext;\n}\n\n/**\n * Implements the following hosts based on an api.CompilerHost:\n * - ts.CompilerHost to be consumed by a ts.Program\n * - AotCompilerHost for @angular/compiler\n * - TypeCheckHost for mapping ts errors to ng errors (via translateDiagnostics)\n */\nexport class TsCompilerAotCompilerTypeCheckHostAdapter extends\n    BaseAotCompilerHost<CompilerHost> implements ts.CompilerHost,\n    TypeCheckHost {\n  private rootDirs: string[];\n  private moduleResolutionCache: ts.ModuleResolutionCache;\n  private originalSourceFiles = new Map<string, ts.SourceFile>();\n  private originalFileExistsCache = new Map<string, boolean>();\n  private generatedSourceFiles = new Map<string, GenSourceFile>();\n  private generatedCodeFor = new Set<string>();\n  private emitter = new TypeScriptEmitter();\n  getCancellationToken: () => ts.CancellationToken;\n  getDefaultLibLocation: () => string;\n  trace: (s: string) => void;\n  getDirectories: (path: string) => string[];\n  directoryExists?: (directoryName: string) => boolean;\n\n  constructor(\n      private rootFiles: string[], options: CompilerOptions, context: CompilerHost,\n      private metadataProvider: MetadataProvider,\n      private codeGenerator: (fileName: string) => GeneratedFile[],\n      private summariesFromPreviousCompilations: Map<string, string>) {\n    super(options, context);\n    this.moduleResolutionCache = ts.createModuleResolutionCache(\n        this.context.getCurrentDirectory !(), this.context.getCanonicalFileName.bind(this.context));\n    const basePath = this.options.basePath !;\n    this.rootDirs =\n        (this.options.rootDirs || [this.options.basePath !]).map(p => path.resolve(basePath, p));\n    if (context.getDirectories) {\n      this.getDirectories = path => context.getDirectories !(path);\n    }\n    if (context.directoryExists) {\n      this.directoryExists = directoryName => context.directoryExists !(directoryName);\n    }\n    if (context.getCancellationToken) {\n      this.getCancellationToken = () => context.getCancellationToken !();\n    }\n    if (context.getDefaultLibLocation) {\n      this.getDefaultLibLocation = () => context.getDefaultLibLocation !();\n    }\n    if (context.trace) {\n      this.trace = s => context.trace !(s);\n    }\n    if (context.fileNameToModuleName) {\n      this.fileNameToModuleName = context.fileNameToModuleName.bind(context);\n    }\n    // Note: don't copy over context.moduleNameToFileName as we first\n    // normalize undefined containingFile to a filled containingFile.\n    if (context.resourceNameToFileName) {\n      this.resourceNameToFileName = context.resourceNameToFileName.bind(context);\n    }\n    if (context.toSummaryFileName) {\n      this.toSummaryFileName = context.toSummaryFileName.bind(context);\n    }\n    if (context.fromSummaryFileName) {\n      this.fromSummaryFileName = context.fromSummaryFileName.bind(context);\n    }\n  }\n\n  private resolveModuleName(moduleName: string, containingFile: string): ts.ResolvedModule\n      |undefined {\n    const rm = ts.resolveModuleName(\n                     moduleName, containingFile, this.options, this, this.moduleResolutionCache)\n                   .resolvedModule;\n    if (rm && this.isSourceFile(rm.resolvedFileName)) {\n      // Case: generateCodeForLibraries = true and moduleName is\n      // a .d.ts file in a node_modules folder.\n      // Need to set isExternalLibraryImport to false so that generated files for that file\n      // are emitted.\n      rm.isExternalLibraryImport = false;\n    }\n    return rm;\n  }\n\n  // Note: We implement this method so that TypeScript and Angular share the same\n  // ts.ModuleResolutionCache\n  // and that we can tell ts.Program about our different opinion about\n  // ResolvedModule.isExternalLibraryImport\n  // (see our isSourceFile method).\n  resolveModuleNames(moduleNames: string[], containingFile: string): ts.ResolvedModule[] {\n    // TODO(tbosch): this seems to be a typing error in TypeScript,\n    // as it contains assertions that the result contains the same number of entries\n    // as the given module names.\n    return <ts.ResolvedModule[]>moduleNames.map(\n        moduleName => this.resolveModuleName(moduleName, containingFile));\n  }\n\n  moduleNameToFileName(m: string, containingFile?: string): string|null {\n    if (!containingFile) {\n      if (m.indexOf('.') === 0) {\n        throw new Error('Resolution of relative paths requires a containing file.');\n      }\n      // Any containing file gives the same result for absolute imports\n      containingFile = this.rootFiles[0];\n    }\n    if (this.context.moduleNameToFileName) {\n      return this.context.moduleNameToFileName(m, containingFile);\n    }\n    const resolved = this.resolveModuleName(m, containingFile);\n    return resolved ? resolved.resolvedFileName : null;\n  }\n\n  /**\n   * We want a moduleId that will appear in import statements in the generated code\n   * which will be written to `containingFile`.\n   *\n   * Note that we also generate files for files in node_modules, as libraries\n   * only ship .metadata.json files but not the generated code.\n   *\n   * Logic:\n   * 1. if the importedFile and the containingFile are from the project sources\n   *    or from the same node_modules package, use a relative path\n   * 2. if the importedFile is in a node_modules package,\n   *    use a path that starts with the package name.\n   * 3. Error if the containingFile is in the node_modules package\n   *    and the importedFile is in the project soures,\n   *    as that is a violation of the principle that node_modules packages cannot\n   *    import project sources.\n   */\n  fileNameToModuleName(importedFile: string, containingFile: string): string {\n    const originalImportedFile = importedFile;\n    if (this.options.traceResolution) {\n      console.error(\n          'fileNameToModuleName from containingFile', containingFile, 'to importedFile',\n          importedFile);\n    }\n    // drop extension\n    importedFile = importedFile.replace(EXT, '');\n    const importedFilePackagName = getPackageName(importedFile);\n    const containingFilePackageName = getPackageName(containingFile);\n\n    let moduleName: string;\n    if (importedFilePackagName === containingFilePackageName) {\n      const rootedContainingFile = relativeToRootDirs(containingFile, this.rootDirs);\n      const rootedImportedFile = relativeToRootDirs(importedFile, this.rootDirs);\n\n      if (rootedContainingFile !== containingFile && rootedImportedFile !== importedFile) {\n        // if both files are contained in the `rootDirs`, then strip the rootDirs\n        containingFile = rootedContainingFile;\n        importedFile = rootedImportedFile;\n      }\n      moduleName = dotRelative(path.dirname(containingFile), importedFile);\n    } else if (importedFilePackagName) {\n      moduleName = stripNodeModulesPrefix(importedFile);\n    } else {\n      throw new Error(\n          `Trying to import a source file from a node_modules package: import ${originalImportedFile} from ${containingFile}`);\n    }\n    return moduleName;\n  }\n\n  resourceNameToFileName(resourceName: string, containingFile: string): string|null {\n    // Note: we convert package paths into relative paths to be compatible with the the\n    // previous implementation of UrlResolver.\n    const firstChar = resourceName[0];\n    if (firstChar === '/') {\n      resourceName = resourceName.slice(1);\n    } else if (firstChar !== '.') {\n      resourceName = `./${resourceName}`;\n    }\n    const filePathWithNgResource =\n        this.moduleNameToFileName(addNgResourceSuffix(resourceName), containingFile);\n    return filePathWithNgResource ? stripNgResourceSuffix(filePathWithNgResource) : null;\n  }\n\n  toSummaryFileName(fileName: string, referringSrcFileName: string): string {\n    return this.fileNameToModuleName(fileName, referringSrcFileName);\n  }\n\n  fromSummaryFileName(fileName: string, referringLibFileName: string): string {\n    const resolved = this.moduleNameToFileName(fileName, referringLibFileName);\n    if (!resolved) {\n      throw new Error(`Could not resolve ${fileName} from ${referringLibFileName}`);\n    }\n    return resolved;\n  }\n\n  parseSourceSpanOf(fileName: string, line: number, character: number): ParseSourceSpan|null {\n    const data = this.generatedSourceFiles.get(fileName);\n    if (data && data.emitCtx) {\n      return data.emitCtx.spanOf(line, character);\n    }\n    return null;\n  }\n\n  private getOriginalSourceFile(\n      filePath: string, languageVersion?: ts.ScriptTarget,\n      onError?: ((message: string) => void)|undefined): ts.SourceFile|undefined {\n    let sf = this.originalSourceFiles.get(filePath);\n    if (sf) {\n      return sf;\n    }\n    if (!languageVersion) {\n      languageVersion = this.options.target || ts.ScriptTarget.Latest;\n    }\n    sf = this.context.getSourceFile(filePath, languageVersion, onError);\n    this.originalSourceFiles.set(filePath, sf);\n    return sf;\n  }\n\n  getMetadataForSourceFile(filePath: string): ModuleMetadata|undefined {\n    const sf = this.getOriginalSourceFile(filePath);\n    if (!sf) {\n      return undefined;\n    }\n    return this.metadataProvider.getMetadata(sf);\n  }\n\n  updateGeneratedFile(genFile: GeneratedFile): ts.SourceFile|null {\n    if (!genFile.stmts) {\n      return null;\n    }\n    const oldGenFile = this.generatedSourceFiles.get(genFile.genFileUrl);\n    if (!oldGenFile) {\n      throw new Error(`Illegal State: previous GeneratedFile not found for ${genFile.genFileUrl}.`);\n    }\n    const newRefs = genFileExternalReferences(genFile);\n    const oldRefs = oldGenFile.externalReferences;\n    let refsAreEqual = oldRefs.size === newRefs.size;\n    if (refsAreEqual) {\n      newRefs.forEach(r => refsAreEqual = refsAreEqual && oldRefs.has(r));\n    }\n    if (!refsAreEqual) {\n      throw new Error(\n          `Illegal State: external references changed in ${genFile.genFileUrl}.\\nOld: ${Array.from(oldRefs)}.\\nNew: ${Array.from(newRefs)}`);\n    }\n    return this.addGeneratedFile(genFile, newRefs);\n  }\n\n  private addGeneratedFile(genFile: GeneratedFile, externalReferences: Set<string>): ts.SourceFile\n      |null {\n    if (!genFile.stmts) {\n      return null;\n    }\n    const {sourceText, context} = this.emitter.emitStatementsAndContext(\n        genFile.srcFileUrl, genFile.genFileUrl, genFile.stmts, /* preamble */ '',\n        /* emitSourceMaps */ false);\n    const sf = ts.createSourceFile(\n        genFile.genFileUrl, sourceText, this.options.target || ts.ScriptTarget.Latest);\n    this.generatedSourceFiles.set(genFile.genFileUrl, {\n      sourceFile: sf,\n      emitCtx: context, externalReferences,\n    });\n    return sf;\n  }\n\n  private ensureCodeGeneratedFor(fileName: string): void {\n    if (this.generatedCodeFor.has(fileName)) {\n      return;\n    }\n    this.generatedCodeFor.add(fileName);\n\n    const baseNameFromGeneratedFile = this._getBaseNameForGeneratedSourceFile(fileName);\n    if (baseNameFromGeneratedFile) {\n      return this.ensureCodeGeneratedFor(baseNameFromGeneratedFile);\n    }\n    const sf = this.getOriginalSourceFile(fileName, this.options.target || ts.ScriptTarget.Latest);\n    if (!sf) {\n      return;\n    }\n\n    const genFileNames: string[] = [];\n    if (this.isSourceFile(fileName)) {\n      // Note: we can't exit early here,\n      // as we might need to clear out old changes to `SourceFile.referencedFiles`\n      // that were created by a previous run, given an original CompilerHost\n      // that caches source files.\n      const genFiles = this.codeGenerator(fileName);\n      genFiles.forEach(genFile => {\n        const sf = this.addGeneratedFile(genFile, genFileExternalReferences(genFile));\n        if (sf) {\n          genFileNames.push(sf.fileName);\n        }\n      });\n    }\n    addReferencesToSourceFile(sf, genFileNames);\n  }\n\n  getSourceFile(\n      fileName: string, languageVersion: ts.ScriptTarget,\n      onError?: ((message: string) => void)|undefined): ts.SourceFile {\n    this.ensureCodeGeneratedFor(fileName);\n    const genFile = this.generatedSourceFiles.get(fileName);\n    if (genFile) {\n      return genFile.sourceFile;\n    }\n    // TODO(tbosch): TypeScript's typings for getSourceFile are incorrect,\n    // as it can very well return undefined.\n    return this.getOriginalSourceFile(fileName, languageVersion, onError) !;\n  }\n\n  private originalFileExists(fileName: string): boolean {\n    let fileExists = this.originalFileExistsCache.get(fileName);\n    if (fileExists == null) {\n      fileExists = this.context.fileExists(fileName);\n      this.originalFileExistsCache.set(fileName, fileExists);\n    }\n    return fileExists;\n  }\n\n  fileExists(fileName: string): boolean {\n    fileName = stripNgResourceSuffix(fileName);\n    if (fileName.endsWith('.ngfactory.d.ts')) {\n      // Note: the factories of a previous program\n      // are not reachable via the regular fileExists\n      // as they might be in the outDir. So we derive their\n      // fileExist information based on the .ngsummary.json file.\n      if (this.summariesFromPreviousCompilations.has(summaryFileName(fileName))) {\n        return true;\n      }\n    }\n    // Note: Don't rely on this.generatedSourceFiles here,\n    // as it might not have been filled yet.\n    if (this._getBaseNameForGeneratedSourceFile(fileName)) {\n      return true;\n    }\n    return this.summariesFromPreviousCompilations.has(fileName) ||\n        this.originalFileExists(fileName);\n  }\n\n  private _getBaseNameForGeneratedSourceFile(genFileName: string): string|undefined {\n    const genMatch = GENERATED_FILES.exec(genFileName);\n    if (!genMatch) {\n      return undefined;\n    }\n    const [, base, genSuffix, suffix] = genMatch;\n    if (suffix !== 'ts') {\n      return undefined;\n    }\n    if (genSuffix.indexOf('ngstyle') >= 0) {\n      // Note: ngstyle files have names like `afile.css.ngstyle.ts`\n      return base;\n    } else {\n      // Note: on-the-fly generated files always have a `.ts` suffix,\n      // but the file from which we generated it can be a `.ts`/ `.d.ts`\n      // (see options.generateCodeForLibraries).\n      return [`${base}.ts`, `${base}.d.ts`].find(\n          baseFileName => this.isSourceFile(baseFileName) && this.originalFileExists(baseFileName));\n    }\n  }\n\n  loadSummary(filePath: string): string|null {\n    if (this.summariesFromPreviousCompilations.has(filePath)) {\n      return this.summariesFromPreviousCompilations.get(filePath) !;\n    }\n    return super.loadSummary(filePath);\n  }\n\n  isSourceFile(filePath: string): boolean {\n    // If we have a summary from a previous compilation,\n    // treat the file never as a source file.\n    if (this.summariesFromPreviousCompilations.has(summaryFileName(filePath))) {\n      return false;\n    }\n    return super.isSourceFile(filePath);\n  }\n\n  readFile = (fileName: string) => this.context.readFile(fileName);\n  getDefaultLibFileName = (options: ts.CompilerOptions) =>\n      this.context.getDefaultLibFileName(options)\n  getCurrentDirectory = () => this.context.getCurrentDirectory();\n  getCanonicalFileName = (fileName: string) => this.context.getCanonicalFileName(fileName);\n  useCaseSensitiveFileNames = () => this.context.useCaseSensitiveFileNames();\n  getNewLine = () => this.context.getNewLine();\n  // Make sure we do not `host.realpath()` from TS as we do not want to resolve symlinks.\n  // https://github.com/Microsoft/TypeScript/issues/9552\n  realPath = (p: string) => p;\n  writeFile = this.context.writeFile.bind(this.context);\n}\n\nfunction genFileExternalReferences(genFile: GeneratedFile): Set<string> {\n  return new Set(collectExternalReferences(genFile.stmts !).map(er => er.moduleName !));\n}\n\nfunction addReferencesToSourceFile(sf: ts.SourceFile, genFileNames: string[]) {\n  // Note: as we modify ts.SourceFiles we need to keep the original\n  // value for `referencedFiles` around in cache the original host is caching ts.SourceFiles.\n  // Note: cloning the ts.SourceFile is expensive as the nodes in have parent pointers,\n  // i.e. we would also need to clone and adjust all nodes.\n  let originalReferencedFiles: ts.FileReference[]|undefined = (sf as any).originalReferencedFiles;\n  if (!originalReferencedFiles) {\n    originalReferencedFiles = sf.referencedFiles;\n    (sf as any).originalReferencedFiles = originalReferencedFiles;\n  }\n  const newReferencedFiles = [...originalReferencedFiles];\n  genFileNames.forEach(gf => newReferencedFiles.push({fileName: gf, pos: 0, end: 0}));\n  sf.referencedFiles = newReferencedFiles;\n}\n\nexport function getOriginalReferences(sourceFile: ts.SourceFile): ts.FileReference[]|undefined {\n  return sourceFile && (sourceFile as any).originalReferencedFiles;\n}\n\nfunction dotRelative(from: string, to: string): string {\n  const rPath: string = path.relative(from, to).replace(/\\\\/g, '/');\n  return rPath.startsWith('.') ? rPath : './' + rPath;\n}\n\n/**\n * Moves the path into `genDir` folder while preserving the `node_modules` directory.\n */\nfunction getPackageName(filePath: string): string|null {\n  const match = NODE_MODULES_PACKAGE_NAME.exec(filePath);\n  return match ? match[1] : null;\n}\n\nexport function relativeToRootDirs(filePath: string, rootDirs: string[]): string {\n  if (!filePath) return filePath;\n  for (const dir of rootDirs || []) {\n    const rel = path.relative(dir, filePath);\n    if (rel.indexOf('.') != 0) return rel;\n  }\n  return filePath;\n}\n\nfunction stripNodeModulesPrefix(filePath: string): string {\n  return filePath.replace(/.*node_modules\\//, '');\n}\n\nfunction getNodeModulesPrefix(filePath: string): string|null {\n  const match = /.*node_modules\\//.exec(filePath);\n  return match ? match[1] : null;\n}\n\nfunction stripNgResourceSuffix(fileName: string): string {\n  return fileName.replace(/\\.\\$ngresource\\$.*/, '');\n}\n\nfunction addNgResourceSuffix(fileName: string): string {\n  return `${fileName}.$ngresource$`;\n}\n\nfunction summaryFileName(fileName: string): string {\n  const genFileMatch = GENERATED_FILES.exec(fileName);\n  if (genFileMatch) {\n    const base = genFileMatch[1];\n    return base + '.ngsummary.json';\n  }\n  return fileName.replace(EXT, '') + '.ngsummary.json';\n}"]}