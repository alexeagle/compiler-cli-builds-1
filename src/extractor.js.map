{"version":3,"sources":["../../../../modules/@angular/compiler-cli/src/extractor.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAGH;;GAEG;AACH,sEAAsE;AACtE,4BAA0B;AAE1B,8CAA8C;AAE9C,6BAA6B;AAG7B,mDAA+F;AAC/F,2EAAmE;AAEnE;IACE,YACY,OAAmC,EAAU,WAA+B,EAC7E,IAAqB,EAAU,cAA4B,EAC1D,OAAmB;QAFnB,YAAO,GAAP,OAAO,CAA4B;QAAU,gBAAW,GAAX,WAAW,CAAoB;QAC7E,SAAI,GAAJ,IAAI,CAAiB;QAAU,mBAAc,GAAd,cAAc,CAAc;QAC1D,YAAO,GAAP,OAAO,CAAY;IAAG,CAAC;IAEnC,OAAO,CAAC,UAAkB;QACxB,8CAA8C;QAC9C,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAE1C,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAE3C,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM;YAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YAC5C,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,GAAG,EAAE,CAAC,CAAC;YAClE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,aAAa;QACX,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,GAAG,CAC3C,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEjE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IAED,SAAS,CAAC,MAA8B,EAAE,GAAW;QACnD,IAAI,UAA+B,CAAC;QAEpC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACZ,KAAK,KAAK;gBACR,UAAU,GAAG,IAAI,QAAQ,CAAC,GAAG,EAAE,CAAC;gBAChC,KAAK,CAAC;YACR,KAAK,KAAK,CAAC;YACX;gBACE,UAAU,GAAG,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;QACtC,CAAC;QAED,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IAED,YAAY,CAAC,UAAkB;QAC7B,MAAM,MAAM,GAAG,CAAC,UAAU,IAAI,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QAEnD,EAAE,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QACnC,EAAE,CAAC,CAAC,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,MAAM,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAExD,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACxD,CAAC;IAED,MAAM,CAAC,MAAM,CACT,OAAmC,EAAE,OAAmB,EAAE,cAA+B,EACzF,mBAAyC,EAAE,cAA6B;QAC1E,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACpB,MAAM,cAAc,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;YACzE,MAAM,OAAO,GAAG,mBAAmB,IAAI,IAAI,2CAA2B,CAAC,cAAc,CAAC,CAAC;YACvF,cAAc,GAAG,cAAc,GAAG,IAAI,kDAAsB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;gBACrD,IAAI,4BAAY,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAChF,CAAC;QAED,MAAM,EAAC,SAAS,EAAE,WAAW,EAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAE3E,MAAM,CAAC,IAAI,SAAS,CAAC,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;IACtF,CAAC;CACF;AAhED,8BAgEC","file":"extractor.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Extract i18n messages from source code\n */\n// Must be imported first, because angular2 decorators throws on load.\nimport 'reflect-metadata';\n\nimport * as compiler from '@angular/compiler';\nimport * as tsc from '@angular/tsc-wrapped';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {CompilerHost, CompilerHostContext, ModuleResolutionHostAdapter} from './compiler_host';\nimport {PathMappedCompilerHost} from './path_mapped_compiler_host';\n\nexport class Extractor {\n  constructor(\n      private options: tsc.AngularCompilerOptions, private ngExtractor: compiler.Extractor,\n      public host: ts.CompilerHost, private ngCompilerHost: CompilerHost,\n      private program: ts.Program) {}\n\n  extract(formatName: string): Promise<void> {\n    // Checks the format and returns the extension\n    const ext = this.getExtension(formatName);\n\n    const promiseBundle = this.extractBundle();\n\n    return promiseBundle.then(bundle => {\n      const content = this.serialize(bundle, ext);\n      const dstPath = path.join(this.options.genDir, `messages.${ext}`);\n      this.host.writeFile(dstPath, content, false);\n    });\n  }\n\n  extractBundle(): Promise<compiler.MessageBundle> {\n    const files = this.program.getSourceFiles().map(\n        sf => this.ngCompilerHost.getCanonicalFileName(sf.fileName));\n\n    return this.ngExtractor.extract(files);\n  }\n\n  serialize(bundle: compiler.MessageBundle, ext: string): string {\n    let serializer: compiler.Serializer;\n\n    switch (ext) {\n      case 'xmb':\n        serializer = new compiler.Xmb();\n        break;\n      case 'xlf':\n      default:\n        serializer = new compiler.Xliff();\n    }\n\n    return bundle.write(serializer);\n  }\n\n  getExtension(formatName: string): string {\n    const format = (formatName || 'xlf').toLowerCase();\n\n    if (format === 'xmb') return 'xmb';\n    if (format === 'xlf' || format === 'xlif') return 'xlf';\n\n    throw new Error('Unsupported format \"${formatName}\"');\n  }\n\n  static create(\n      options: tsc.AngularCompilerOptions, program: ts.Program, tsCompilerHost: ts.CompilerHost,\n      compilerHostContext?: CompilerHostContext, ngCompilerHost?: CompilerHost): Extractor {\n    if (!ngCompilerHost) {\n      const usePathMapping = !!options.rootDirs && options.rootDirs.length > 0;\n      const context = compilerHostContext || new ModuleResolutionHostAdapter(tsCompilerHost);\n      ngCompilerHost = usePathMapping ? new PathMappedCompilerHost(program, options, context) :\n                                        new CompilerHost(program, options, context);\n    }\n\n    const {extractor: ngExtractor} = compiler.Extractor.create(ngCompilerHost);\n\n    return new Extractor(options, ngExtractor, tsCompilerHost, ngCompilerHost, program);\n  }\n}\n"]}