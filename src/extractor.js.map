{"version":3,"file":"extractor.js","sourceRoot":"","sources":["../../../../packages/compiler-cli/src/extractor.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAGH;;GAEG;AACH,oEAAoE;AACpE,4BAA0B;AAE1B,4CAA8C;AAK9C,iDAA+F;AAC/F,yEAAmE;AACnE,kDAAoF;AAEpF;IACE,mBACY,OAAmC,EAAU,WAA+B,EAC7E,IAAqB,EAAU,cAA4B,EAC1D,OAAmB;QAFnB,YAAO,GAAP,OAAO,CAA4B;QAAU,gBAAW,GAAX,WAAW,CAAoB;QAC7E,SAAI,GAAJ,IAAI,CAAiB;QAAU,mBAAc,GAAd,cAAc,CAAc;QAC1D,YAAO,GAAP,OAAO,CAAY;IAAG,CAAC;IAEnC,2BAAO,GAAP,UAAQ,UAAkB,EAAE,OAAoB;QAAhD,iBAGC;QAFC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAC5B,UAAA,MAAM,IAAI,OAAA,qBAAW,CAAC,UAAU,EAAE,OAAO,EAAE,KAAI,CAAC,IAAI,EAAE,KAAI,CAAC,OAAO,EAAE,MAAM,CAAC,EAAjE,CAAiE,CAAC,CAAC;IACnF,CAAC;IAED,iCAAa,GAAb;QAAA,iBAKC;QAJC,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,GAAG,CAC3C,UAAA,EAAE,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,EAAE,CAAC,QAAQ,CAAC,EAArD,CAAqD,CAAC,CAAC;QAEjE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IAED,6BAAS,GAAT,UAAU,MAA8B,EAAE,UAAkB;QAC1D,MAAM,CAAC,uBAAa,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACzD,CAAC;IAED,gCAAY,GAAZ,UAAa,UAAkB,IAAY,MAAM,CAAC,0BAAgB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAE1E,gBAAM,GAAb,UACI,OAAmC,EAAE,OAAmB,EAAE,cAA+B,EACzF,MAAoB,EAAE,mBAAyC,EAC/D,cAA6B;QAC/B,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACpB,IAAM,cAAc,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;YACzE,IAAM,OAAO,GAAG,mBAAmB,IAAI,IAAI,2CAA2B,CAAC,cAAc,CAAC,CAAC;YACvF,cAAc,GAAG,cAAc,GAAG,IAAI,kDAAsB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;gBACrD,IAAI,4BAAY,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAChF,CAAC;QAEM,IAAA,iFAAsB,CAA8D;QAE3F,MAAM,CAAC,IAAI,SAAS,CAAC,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;IACtF,CAAC;IACH,gBAAC;AAAD,CAAC,AAvCD,IAuCC;AAvCY,8BAAS","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Extract i18n messages from source code\n */\n// Must be imported first, because Angular decorators throw on load.\nimport 'reflect-metadata';\n\nimport * as compiler from '@angular/compiler';\nimport * as tsc from '@angular/tsc-wrapped';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {CompilerHost, CompilerHostContext, ModuleResolutionHostAdapter} from './compiler_host';\nimport {PathMappedCompilerHost} from './path_mapped_compiler_host';\nimport {i18nExtract, i18nGetExtension, i18nSerialize} from './transformers/program';\n\nexport class Extractor {\n  constructor(\n      private options: tsc.AngularCompilerOptions, private ngExtractor: compiler.Extractor,\n      public host: ts.CompilerHost, private ngCompilerHost: CompilerHost,\n      private program: ts.Program) {}\n\n  extract(formatName: string, outFile: string|null): Promise<string[]> {\n    return this.extractBundle().then(\n        bundle => i18nExtract(formatName, outFile, this.host, this.options, bundle));\n  }\n\n  extractBundle(): Promise<compiler.MessageBundle> {\n    const files = this.program.getSourceFiles().map(\n        sf => this.ngCompilerHost.getCanonicalFileName(sf.fileName));\n\n    return this.ngExtractor.extract(files);\n  }\n\n  serialize(bundle: compiler.MessageBundle, formatName: string): string {\n    return i18nSerialize(bundle, formatName, this.options);\n  }\n\n  getExtension(formatName: string): string { return i18nGetExtension(formatName); }\n\n  static create(\n      options: tsc.AngularCompilerOptions, program: ts.Program, tsCompilerHost: ts.CompilerHost,\n      locale?: string|null, compilerHostContext?: CompilerHostContext,\n      ngCompilerHost?: CompilerHost): Extractor {\n    if (!ngCompilerHost) {\n      const usePathMapping = !!options.rootDirs && options.rootDirs.length > 0;\n      const context = compilerHostContext || new ModuleResolutionHostAdapter(tsCompilerHost);\n      ngCompilerHost = usePathMapping ? new PathMappedCompilerHost(program, options, context) :\n                                        new CompilerHost(program, options, context);\n    }\n\n    const {extractor: ngExtractor} = compiler.Extractor.create(ngCompilerHost, locale || null);\n\n    return new Extractor(options, ngExtractor, tsCompilerHost, ngCompilerHost, program);\n  }\n}\n"]}